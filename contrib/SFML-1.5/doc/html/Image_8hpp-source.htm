<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>Image.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_IMAGE_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_IMAGE_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/System/Resource.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Graphics/Color.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;SFML/Graphics/Rect.hpp&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00035"></a>00035 <span class="preprocessor">#include &lt;vector&gt;</span>
<a name="l00036"></a>00036 
<a name="l00037"></a>00037 
<a name="l00038"></a>00038 <span class="keyword">namespace </span>sf
<a name="l00039"></a>00039 {
<a name="l00040"></a>00040 <span class="keyword">class </span>RenderImage;
<a name="l00041"></a>00041 <span class="keyword">class </span>RenderWindow;
<a name="l00042"></a>00042 
<a name="l00047"></a><a class="code" href="classsf_1_1Image.htm">00047</a> <span class="keyword">class </span>SFML_API <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a> : <span class="keyword">public</span> <a class="code" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a>&lt;Image&gt;
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049 <span class="keyword">public</span> :
<a name="l00050"></a>00050 
<a name="l00055"></a>00055     <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>();
<a name="l00056"></a>00056 
<a name="l00063"></a>00063     <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>&amp; Copy);
<a name="l00064"></a>00064 
<a name="l00073"></a>00073     <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Col = <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>(0, 0, 0, 255));
<a name="l00074"></a>00074 
<a name="l00083"></a>00083     <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <span class="keyword">const</span> Uint8* Data);
<a name="l00084"></a>00084 
<a name="l00089"></a>00089     ~<a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>();
<a name="l00090"></a>00090 
<a name="l00099"></a>00099     <span class="keywordtype">bool</span> LoadFromFile(<span class="keyword">const</span> std::string&amp; Filename);
<a name="l00100"></a>00100 
<a name="l00110"></a>00110     <span class="keywordtype">bool</span> LoadFromMemory(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes);
<a name="l00111"></a>00111 
<a name="l00122"></a>00122     <span class="keywordtype">bool</span> LoadFromPixels(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <span class="keyword">const</span> Uint8* Data);
<a name="l00123"></a>00123 
<a name="l00132"></a>00132     <span class="keywordtype">bool</span> SaveToFile(<span class="keyword">const</span> std::string&amp; Filename) <span class="keyword">const</span>;
<a name="l00133"></a>00133 
<a name="l00144"></a>00144     <span class="keywordtype">bool</span> Create(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> Col = <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>(0, 0, 0, 255));
<a name="l00145"></a>00145 
<a name="l00153"></a>00153     <span class="keywordtype">void</span> CreateMaskFromColor(<a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> ColorKey, Uint8 Alpha = 0);
<a name="l00154"></a>00154 
<a name="l00167"></a>00167     <span class="keywordtype">void</span> Copy(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>&amp; Source, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> DestX, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> DestY, <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; SourceRect = <a class="code" href="classsf_1_1Rect.htm">IntRect</a>(0, 0, 0, 0), <span class="keywordtype">bool</span> ApplyAlpha = <span class="keyword">false</span>);
<a name="l00168"></a>00168 
<a name="l00179"></a>00179     <span class="keywordtype">bool</span> CopyScreen(<a class="code" href="classsf_1_1RenderWindow.htm" title="Simple wrapper for sf::Window that allows easy 2D rendering.">RenderWindow</a>&amp; <a class="code" href="classsf_1_1Window.htm" title="Window is a rendering window ; it can create a new window or connect to an existing...">Window</a>, <span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; SourceRect = <a class="code" href="classsf_1_1Rect.htm">IntRect</a>(0, 0, 0, 0));
<a name="l00180"></a>00180 
<a name="l00189"></a>00189     <span class="keywordtype">void</span> SetPixel(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> X, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Y, <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; Col);
<a name="l00190"></a>00190 
<a name="l00200"></a>00200     <span class="keyword">const</span> <a class="code" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a>&amp; GetPixel(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> X, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Y) <span class="keyword">const</span>;
<a name="l00201"></a>00201 
<a name="l00210"></a>00210     <span class="keyword">const</span> Uint8* GetPixelsPtr() <span class="keyword">const</span>;
<a name="l00211"></a>00211 
<a name="l00216"></a>00216     <span class="keywordtype">void</span> Bind() <span class="keyword">const</span>;
<a name="l00217"></a>00217 
<a name="l00225"></a>00225     <span class="keywordtype">void</span> SetSmooth(<span class="keywordtype">bool</span> Smooth);
<a name="l00226"></a>00226 
<a name="l00233"></a>00233     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetWidth() <span class="keyword">const</span>;
<a name="l00234"></a>00234 
<a name="l00241"></a>00241     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetHeight() <span class="keyword">const</span>;
<a name="l00242"></a>00242 
<a name="l00249"></a>00249     <span class="keywordtype">bool</span> IsSmooth() <span class="keyword">const</span>;
<a name="l00250"></a>00250 
<a name="l00261"></a>00261     <a class="code" href="classsf_1_1Rect.htm">FloatRect</a> GetTexCoords(<span class="keyword">const</span> <a class="code" href="classsf_1_1Rect.htm">IntRect</a>&amp; <a class="code" href="classsf_1_1Rect.htm" title="Rect is an utility class for manipulating rectangles.">Rect</a>, <span class="keywordtype">bool</span> Adjust = <span class="keyword">true</span>) <span class="keyword">const</span>;
<a name="l00262"></a>00262 
<a name="l00271"></a>00271     <span class="keyword">static</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> GetValidTextureSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Size);
<a name="l00272"></a>00272 
<a name="l00281"></a>00281     <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>&amp; operator =(<span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>&amp; Other);
<a name="l00282"></a>00282 
<a name="l00283"></a>00283 <span class="keyword">private</span> :
<a name="l00284"></a>00284 
<a name="l00285"></a>00285     <span class="keyword">friend</span> <span class="keyword">class </span>RenderImage;
<a name="l00286"></a>00286 
<a name="l00293"></a>00293     <span class="keywordtype">bool</span> CreateTexture();
<a name="l00294"></a>00294 
<a name="l00299"></a>00299     <span class="keywordtype">void</span> EnsureTextureUpdate() <span class="keyword">const</span>;
<a name="l00300"></a>00300 
<a name="l00305"></a>00305     <span class="keywordtype">void</span> EnsureArrayUpdate() <span class="keyword">const</span>;
<a name="l00306"></a>00306 
<a name="l00311"></a>00311     <span class="keywordtype">void</span> Reset();
<a name="l00312"></a>00312 
<a name="l00317"></a>00317     <span class="keywordtype">void</span> DestroyTexture();
<a name="l00318"></a>00318 
<a name="l00320"></a>00320     <span class="comment">// Member data</span>
<a name="l00322"></a>00322 <span class="comment"></span>    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>               myWidth;             
<a name="l00323"></a>00323     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>               myHeight;            
<a name="l00324"></a>00324     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>               myTextureWidth;      
<a name="l00325"></a>00325     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>               myTextureHeight;     
<a name="l00326"></a>00326     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>               myTexture;           
<a name="l00327"></a>00327     <span class="keywordtype">bool</span>                       myIsSmooth;          
<a name="l00328"></a>00328     <span class="keyword">mutable</span> std::vector&lt;Color&gt; myPixels;            
<a name="l00329"></a>00329     <span class="keyword">mutable</span> <span class="keywordtype">bool</span>               myNeedTextureUpdate; 
<a name="l00330"></a>00330     <span class="keyword">mutable</span> <span class="keywordtype">bool</span>               myNeedArrayUpdate;   
<a name="l00331"></a>00331 };
<a name="l00332"></a>00332 
<a name="l00333"></a>00333 } <span class="comment">// namespace sf</span>
<a name="l00334"></a>00334 
<a name="l00335"></a>00335 
<a name="l00336"></a>00336 <span class="preprocessor">#endif // SFML_IMAGE_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
