<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>SoundBuffer.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Audio/SoundBuffer.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Audio/SoundFile.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Audio/AudioDevice.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;SFML/Audio/OpenAL.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;memory&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="keyword">namespace </span>sf
<a name="l00037"></a>00037 {
<a name="l00041"></a><a class="code" href="classsf_1_1SoundBuffer.htm#0cabfbfe19b831bf7d5c9592d92ef233">00041</a> <a class="code" href="classsf_1_1SoundBuffer.htm#0cabfbfe19b831bf7d5c9592d92ef233" title="Default constructor.">SoundBuffer::SoundBuffer</a>() :
<a name="l00042"></a>00042 myBuffer  (0),
<a name="l00043"></a>00043 myDuration(0.f)
<a name="l00044"></a>00044 {
<a name="l00045"></a>00045     <span class="comment">// Create the buffer</span>
<a name="l00046"></a>00046     ALCheck(alGenBuffers(1, &amp;myBuffer));
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00053"></a><a class="code" href="classsf_1_1SoundBuffer.htm#deb60002d4c4a4d8511fb5aa7225224b">00053</a> <a class="code" href="classsf_1_1SoundBuffer.htm#0cabfbfe19b831bf7d5c9592d92ef233" title="Default constructor.">SoundBuffer::SoundBuffer</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a>&amp; Copy) :
<a name="l00054"></a>00054 <a class="code" href="classsf_1_1AudioResource.htm" title="Abstract base class for every class that owns a device-dependant resource -- allow...">AudioResource</a>        (Copy),
<a name="l00055"></a>00055 <a class="code" href="classsf_1_1Resource.htm" title="Base class for every resource that needs to notify dependent classes about its destruction...">Resource</a>&lt;<a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a>&gt;(Copy),
<a name="l00056"></a>00056 myBuffer             (0),
<a name="l00057"></a>00057 mySamples            (Copy.mySamples),
<a name="l00058"></a>00058 myDuration           (Copy.myDuration)
<a name="l00059"></a>00059 {
<a name="l00060"></a>00060     <span class="comment">// Create the buffer</span>
<a name="l00061"></a>00061     ALCheck(alGenBuffers(1, &amp;myBuffer));
<a name="l00062"></a>00062 
<a name="l00063"></a>00063     <span class="comment">// Update the internal buffer with the new samples</span>
<a name="l00064"></a>00064     Update(Copy.<a class="code" href="classsf_1_1SoundBuffer.htm#cfea4667cb8a5e72b1061fa2647af30f" title="Return the number of channels (1 = mono, 2 = stereo, .">GetChannelsCount</a>(), Copy.<a class="code" href="classsf_1_1SoundBuffer.htm#c4b1b885e3720689c6cbc22ff6cbe571" title="Get the sample rate.">GetSampleRate</a>());
<a name="l00065"></a>00065 }
<a name="l00066"></a>00066 
<a name="l00067"></a>00067 
<a name="l00071"></a><a class="code" href="classsf_1_1SoundBuffer.htm#ea240161724ffba74a0d6a9e277d3cd5">00071</a> <a class="code" href="classsf_1_1SoundBuffer.htm#ea240161724ffba74a0d6a9e277d3cd5" title="Destructor.">SoundBuffer::~SoundBuffer</a>()
<a name="l00072"></a>00072 {
<a name="l00073"></a>00073     <span class="keywordflow">if</span> (myBuffer)
<a name="l00074"></a>00074         ALCheck(alDeleteBuffers(1, &amp;myBuffer));
<a name="l00075"></a>00075 }
<a name="l00076"></a>00076 
<a name="l00077"></a>00077 
<a name="l00081"></a><a class="code" href="classsf_1_1SoundBuffer.htm#232bb58d0910729a542cc2af473c8aa4">00081</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundBuffer.htm#232bb58d0910729a542cc2af473c8aa4" title="Load the sound buffer from a file.">SoundBuffer::LoadFromFile</a>(<span class="keyword">const</span> std::string&amp; Filename)
<a name="l00082"></a>00082 {
<a name="l00083"></a>00083     <span class="comment">// Create the sound file</span>
<a name="l00084"></a>00084     std::auto_ptr&lt;priv::SoundFile&gt; File(priv::SoundFile::CreateRead(Filename));
<a name="l00085"></a>00085 
<a name="l00086"></a>00086     <span class="comment">// Open the sound file</span>
<a name="l00087"></a>00087     <span class="keywordflow">if</span> (File.get())
<a name="l00088"></a>00088     {
<a name="l00089"></a>00089         <span class="comment">// Get the sound parameters</span>
<a name="l00090"></a>00090         std::size_t  NbSamples     = File-&gt;GetSamplesCount();
<a name="l00091"></a>00091         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount = File-&gt;GetChannelsCount();
<a name="l00092"></a>00092         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate    = File-&gt;GetSampleRate();
<a name="l00093"></a>00093 
<a name="l00094"></a>00094         <span class="comment">// Read the samples from the opened file</span>
<a name="l00095"></a>00095         mySamples.resize(NbSamples);
<a name="l00096"></a>00096         <span class="keywordflow">if</span> (File-&gt;Read(&amp;mySamples[0], NbSamples) == NbSamples)
<a name="l00097"></a>00097         {
<a name="l00098"></a>00098             <span class="comment">// Update the internal buffer with the new samples</span>
<a name="l00099"></a>00099             <span class="keywordflow">return</span> Update(ChannelsCount, SampleRate);
<a name="l00100"></a>00100         }
<a name="l00101"></a>00101         <span class="keywordflow">else</span>
<a name="l00102"></a>00102         {
<a name="l00103"></a>00103             <span class="comment">// Error...</span>
<a name="l00104"></a>00104             std::cerr &lt;&lt; <span class="stringliteral">"Failed to read audio data from file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\""</span> &lt;&lt; std::endl;
<a name="l00105"></a>00105 
<a name="l00106"></a>00106             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00107"></a>00107         }
<a name="l00108"></a>00108     }
<a name="l00109"></a>00109     <span class="keywordflow">else</span>
<a name="l00110"></a>00110     {
<a name="l00111"></a>00111         <span class="comment">// Error...</span>
<a name="l00112"></a>00112         std::cerr &lt;&lt; <span class="stringliteral">"Failed to load sound buffer from file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\""</span> &lt;&lt; std::endl;
<a name="l00113"></a>00113 
<a name="l00114"></a>00114         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00115"></a>00115     }
<a name="l00116"></a>00116 }
<a name="l00117"></a>00117 
<a name="l00118"></a>00118 
<a name="l00122"></a><a class="code" href="classsf_1_1SoundBuffer.htm#694c43f4ee7b2c6277c1ead496d266f3">00122</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundBuffer.htm#694c43f4ee7b2c6277c1ead496d266f3" title="Load the sound buffer from a file in memory.">SoundBuffer::LoadFromMemory</a>(<span class="keyword">const</span> <span class="keywordtype">char</span>* Data, std::size_t SizeInBytes)
<a name="l00123"></a>00123 {
<a name="l00124"></a>00124     <span class="comment">// Create the sound file</span>
<a name="l00125"></a>00125     std::auto_ptr&lt;priv::SoundFile&gt; File(priv::SoundFile::CreateRead(Data, SizeInBytes));
<a name="l00126"></a>00126 
<a name="l00127"></a>00127     <span class="comment">// Open the sound file</span>
<a name="l00128"></a>00128     <span class="keywordflow">if</span> (File.get())
<a name="l00129"></a>00129     {
<a name="l00130"></a>00130         <span class="comment">// Get the sound parameters</span>
<a name="l00131"></a>00131         std::size_t  NbSamples     = File-&gt;GetSamplesCount();
<a name="l00132"></a>00132         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount = File-&gt;GetChannelsCount();
<a name="l00133"></a>00133         <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate    = File-&gt;GetSampleRate();
<a name="l00134"></a>00134 
<a name="l00135"></a>00135         <span class="comment">// Read the samples from the opened file</span>
<a name="l00136"></a>00136         mySamples.resize(NbSamples);
<a name="l00137"></a>00137         <span class="keywordflow">if</span> (File-&gt;Read(&amp;mySamples[0], NbSamples) == NbSamples)
<a name="l00138"></a>00138         {
<a name="l00139"></a>00139             <span class="comment">// Update the internal buffer with the new samples</span>
<a name="l00140"></a>00140             <span class="keywordflow">return</span> Update(ChannelsCount, SampleRate);
<a name="l00141"></a>00141         }
<a name="l00142"></a>00142         <span class="keywordflow">else</span>
<a name="l00143"></a>00143         {
<a name="l00144"></a>00144             <span class="comment">// Error...</span>
<a name="l00145"></a>00145             std::cerr &lt;&lt; <span class="stringliteral">"Failed to read audio data from file in memory"</span> &lt;&lt; std::endl;
<a name="l00146"></a>00146 
<a name="l00147"></a>00147             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00148"></a>00148         }
<a name="l00149"></a>00149     }
<a name="l00150"></a>00150     <span class="keywordflow">else</span>
<a name="l00151"></a>00151     {
<a name="l00152"></a>00152         <span class="comment">// Error...</span>
<a name="l00153"></a>00153         std::cerr &lt;&lt; <span class="stringliteral">"Failed to load sound buffer from file in memory"</span> &lt;&lt; std::endl;
<a name="l00154"></a>00154 
<a name="l00155"></a>00155         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00156"></a>00156     }
<a name="l00157"></a>00157 }
<a name="l00158"></a>00158 
<a name="l00159"></a>00159 
<a name="l00164"></a><a class="code" href="classsf_1_1SoundBuffer.htm#5efd0d42e07a4c7841b6d4f30849d7dc">00164</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundBuffer.htm#5efd0d42e07a4c7841b6d4f30849d7dc" title="Load the sound buffer from an array of samples - assumed format for samples is 16...">SoundBuffer::LoadFromSamples</a>(<span class="keyword">const</span> Int16* Samples, std::size_t SamplesCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate)
<a name="l00165"></a>00165 {
<a name="l00166"></a>00166     <span class="keywordflow">if</span> (Samples &amp;&amp; SamplesCount &amp;&amp; ChannelsCount &amp;&amp; SampleRate)
<a name="l00167"></a>00167     {
<a name="l00168"></a>00168         <span class="comment">// Copy the new audio samples</span>
<a name="l00169"></a>00169         mySamples.assign(Samples, Samples + SamplesCount);
<a name="l00170"></a>00170 
<a name="l00171"></a>00171         <span class="comment">// Update the internal buffer with the new samples</span>
<a name="l00172"></a>00172         <span class="keywordflow">return</span> Update(ChannelsCount, SampleRate);
<a name="l00173"></a>00173     }
<a name="l00174"></a>00174     <span class="keywordflow">else</span>
<a name="l00175"></a>00175     {
<a name="l00176"></a>00176         <span class="comment">// Error...</span>
<a name="l00177"></a>00177         std::cerr &lt;&lt; <span class="stringliteral">"Failed to load sound buffer from memory ("</span>
<a name="l00178"></a>00178                   &lt;&lt; <span class="stringliteral">"Samples : "</span>        &lt;&lt; Samples       &lt;&lt; <span class="stringliteral">", "</span>
<a name="l00179"></a>00179                   &lt;&lt; <span class="stringliteral">"Samples count : "</span>  &lt;&lt; SamplesCount  &lt;&lt; <span class="stringliteral">", "</span>
<a name="l00180"></a>00180                   &lt;&lt; <span class="stringliteral">"Channels count : "</span> &lt;&lt; ChannelsCount &lt;&lt; <span class="stringliteral">", "</span>
<a name="l00181"></a>00181                   &lt;&lt; <span class="stringliteral">"Sample rate : "</span>    &lt;&lt; SampleRate    &lt;&lt; <span class="stringliteral">")"</span>
<a name="l00182"></a>00182                   &lt;&lt; std::endl;
<a name="l00183"></a>00183 
<a name="l00184"></a>00184         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00185"></a>00185     }
<a name="l00186"></a>00186 }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188 
<a name="l00192"></a><a class="code" href="classsf_1_1SoundBuffer.htm#f4515a797138382cf98a4d9cd5047239">00192</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1SoundBuffer.htm#f4515a797138382cf98a4d9cd5047239" title="Save the sound buffer to a file.">SoundBuffer::SaveToFile</a>(<span class="keyword">const</span> std::string&amp; Filename)<span class="keyword"> const</span>
<a name="l00193"></a>00193 <span class="keyword"></span>{
<a name="l00194"></a>00194     <span class="comment">// Create the sound file in write mode</span>
<a name="l00195"></a>00195     std::auto_ptr&lt;priv::SoundFile&gt; File(priv::SoundFile::CreateWrite(Filename, <a class="code" href="classsf_1_1SoundBuffer.htm#cfea4667cb8a5e72b1061fa2647af30f" title="Return the number of channels (1 = mono, 2 = stereo, .">GetChannelsCount</a>(), <a class="code" href="classsf_1_1SoundBuffer.htm#c4b1b885e3720689c6cbc22ff6cbe571" title="Get the sample rate.">GetSampleRate</a>()));
<a name="l00196"></a>00196     <span class="keywordflow">if</span> (File.get())
<a name="l00197"></a>00197     {
<a name="l00198"></a>00198         <span class="comment">// Write the samples to the opened file</span>
<a name="l00199"></a>00199         File-&gt;Write(&amp;mySamples[0], mySamples.size());
<a name="l00200"></a>00200 
<a name="l00201"></a>00201         <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00202"></a>00202     }
<a name="l00203"></a>00203     <span class="keywordflow">else</span>
<a name="l00204"></a>00204     {
<a name="l00205"></a>00205         <span class="comment">// Error...</span>
<a name="l00206"></a>00206         std::cerr &lt;&lt; <span class="stringliteral">"Failed to save sound buffer to file \""</span> &lt;&lt; Filename &lt;&lt; <span class="stringliteral">"\""</span> &lt;&lt; std::endl;
<a name="l00207"></a>00207 
<a name="l00208"></a>00208         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00209"></a>00209     }
<a name="l00210"></a>00210 }
<a name="l00211"></a>00211 
<a name="l00212"></a>00212 
<a name="l00216"></a><a class="code" href="classsf_1_1SoundBuffer.htm#26b7f93c9d02c34545ff3f1b37206fe0">00216</a> <span class="keyword">const</span> Int16* <a class="code" href="classsf_1_1SoundBuffer.htm#26b7f93c9d02c34545ff3f1b37206fe0" title="Return the sound samples.">SoundBuffer::GetSamples</a>()<span class="keyword"> const</span>
<a name="l00217"></a>00217 <span class="keyword"></span>{
<a name="l00218"></a>00218     <span class="keywordflow">return</span> mySamples.empty() ? NULL : &amp;mySamples[0];
<a name="l00219"></a>00219 }
<a name="l00220"></a>00220 
<a name="l00221"></a>00221 
<a name="l00225"></a><a class="code" href="classsf_1_1SoundBuffer.htm#5da93e162669ec8c03b902f622261789">00225</a> std::size_t <a class="code" href="classsf_1_1SoundBuffer.htm#5da93e162669ec8c03b902f622261789" title="Return the samples count.">SoundBuffer::GetSamplesCount</a>()<span class="keyword"> const</span>
<a name="l00226"></a>00226 <span class="keyword"></span>{
<a name="l00227"></a>00227     <span class="keywordflow">return</span> mySamples.size();
<a name="l00228"></a>00228 }
<a name="l00229"></a>00229 
<a name="l00230"></a>00230 
<a name="l00234"></a><a class="code" href="classsf_1_1SoundBuffer.htm#c4b1b885e3720689c6cbc22ff6cbe571">00234</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1SoundBuffer.htm#c4b1b885e3720689c6cbc22ff6cbe571" title="Get the sample rate.">SoundBuffer::GetSampleRate</a>()<span class="keyword"> const</span>
<a name="l00235"></a>00235 <span class="keyword"></span>{
<a name="l00236"></a>00236     ALint SampleRate;
<a name="l00237"></a>00237     ALCheck(alGetBufferi(myBuffer, AL_FREQUENCY, &amp;SampleRate));
<a name="l00238"></a>00238 
<a name="l00239"></a>00239     <span class="keywordflow">return</span> SampleRate;
<a name="l00240"></a>00240 }
<a name="l00241"></a>00241 
<a name="l00242"></a>00242 
<a name="l00246"></a><a class="code" href="classsf_1_1SoundBuffer.htm#cfea4667cb8a5e72b1061fa2647af30f">00246</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1SoundBuffer.htm#cfea4667cb8a5e72b1061fa2647af30f" title="Return the number of channels (1 = mono, 2 = stereo, .">SoundBuffer::GetChannelsCount</a>()<span class="keyword"> const</span>
<a name="l00247"></a>00247 <span class="keyword"></span>{
<a name="l00248"></a>00248     ALint ChannelsCount;
<a name="l00249"></a>00249     ALCheck(alGetBufferi(myBuffer, AL_CHANNELS, &amp;ChannelsCount));
<a name="l00250"></a>00250 
<a name="l00251"></a>00251     <span class="keywordflow">return</span> ChannelsCount;
<a name="l00252"></a>00252 }
<a name="l00253"></a>00253 
<a name="l00254"></a>00254 
<a name="l00258"></a><a class="code" href="classsf_1_1SoundBuffer.htm#525731db309fb7d5b9781e65bc4e0984">00258</a> <span class="keywordtype">float</span> <a class="code" href="classsf_1_1SoundBuffer.htm#525731db309fb7d5b9781e65bc4e0984" title="Get the sound duration.">SoundBuffer::GetDuration</a>()<span class="keyword"> const</span>
<a name="l00259"></a>00259 <span class="keyword"></span>{
<a name="l00260"></a>00260     <span class="keywordflow">return</span> myDuration;
<a name="l00261"></a>00261 }
<a name="l00262"></a>00262 
<a name="l00263"></a>00263 
<a name="l00267"></a><a class="code" href="classsf_1_1SoundBuffer.htm#cfdc7a2357c06e2e15c408a4fa21bd49">00267</a> <a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a>&amp; <a class="code" href="classsf_1_1SoundBuffer.htm#cfdc7a2357c06e2e15c408a4fa21bd49" title="Assignment operator.">SoundBuffer::operator =</a>(<span class="keyword">const</span> <a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a>&amp; Other)
<a name="l00268"></a>00268 {
<a name="l00269"></a>00269     <a class="code" href="classsf_1_1SoundBuffer.htm" title="SoundBuffer is the low-level for loading and manipulating sound buffers.">SoundBuffer</a> Temp(Other);
<a name="l00270"></a>00270 
<a name="l00271"></a>00271     mySamples.swap(Temp.<a class="code" href="classsf_1_1SoundBuffer.htm#b0d890ac6d5aff0e3b8835c2fb30c79a" title="Samples buffer.">mySamples</a>);
<a name="l00272"></a>00272     std::swap(myBuffer,   Temp.<a class="code" href="classsf_1_1SoundBuffer.htm#b9d31c90ee4febbd075b9c64c3072a65" title="OpenAL buffer identifier.">myBuffer</a>);
<a name="l00273"></a>00273     std::swap(myDuration, Temp.<a class="code" href="classsf_1_1SoundBuffer.htm#79018d0cf609a509e857d7c7102fdda2" title="Sound duration, in seconds.">myDuration</a>);
<a name="l00274"></a>00274 
<a name="l00275"></a>00275     <span class="keywordflow">return</span> *<span class="keyword">this</span>;
<a name="l00276"></a>00276 }
<a name="l00277"></a>00277 
<a name="l00278"></a>00278 
<a name="l00282"></a>00282 <span class="keywordtype">bool</span> SoundBuffer::Update(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> ChannelsCount, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> SampleRate)
<a name="l00283"></a>00283 {
<a name="l00284"></a>00284     <span class="comment">// Check parameters</span>
<a name="l00285"></a>00285     <span class="keywordflow">if</span> (!SampleRate || !ChannelsCount || mySamples.empty())
<a name="l00286"></a>00286         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00287"></a>00287 
<a name="l00288"></a>00288     <span class="comment">// Find the good format according to the number of channels</span>
<a name="l00289"></a>00289     ALenum Format = priv::AudioDevice::GetInstance().GetFormatFromChannelsCount(ChannelsCount);
<a name="l00290"></a>00290 
<a name="l00291"></a>00291     <span class="comment">// Check if the format is valid</span>
<a name="l00292"></a>00292     <span class="keywordflow">if</span> (Format == 0)
<a name="l00293"></a>00293     {
<a name="l00294"></a>00294         std::cerr &lt;&lt; <span class="stringliteral">"Unsupported number of channels ("</span> &lt;&lt; ChannelsCount &lt;&lt; <span class="stringliteral">")"</span> &lt;&lt; std::endl;
<a name="l00295"></a>00295         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00296"></a>00296     }
<a name="l00297"></a>00297 
<a name="l00298"></a>00298     <span class="comment">// Fill the buffer</span>
<a name="l00299"></a>00299     ALsizei Size = <span class="keyword">static_cast&lt;</span>ALsizei<span class="keyword">&gt;</span>(mySamples.size()) * <span class="keyword">sizeof</span>(Int16);
<a name="l00300"></a>00300     ALCheck(alBufferData(myBuffer, Format, &amp;mySamples[0], Size, SampleRate));
<a name="l00301"></a>00301 
<a name="l00302"></a>00302     <span class="comment">// Compute the duration</span>
<a name="l00303"></a>00303     myDuration = <span class="keyword">static_cast&lt;</span><span class="keywordtype">float</span><span class="keyword">&gt;</span>(mySamples.size()) / SampleRate / ChannelsCount;
<a name="l00304"></a>00304 
<a name="l00305"></a>00305     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00306"></a>00306 }
<a name="l00307"></a>00307 
<a name="l00308"></a>00308 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
