<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>RenderImage.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2008 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/RenderImage.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Graphics/RenderImageImplFBO.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Graphics/RenderImageImplPBuffer.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>sf
<a name="l00035"></a>00035 {
<a name="l00039"></a><a class="code" href="classsf_1_1RenderImage.htm#3bb43599441a8fef91a16dd6448449ea">00039</a> <a class="code" href="classsf_1_1RenderImage.htm#3bb43599441a8fef91a16dd6448449ea" title="Default constructor.">RenderImage::RenderImage</a>() :
<a name="l00040"></a>00040 myRenderImage(NULL)
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042 
<a name="l00043"></a>00043 }
<a name="l00044"></a>00044 
<a name="l00045"></a>00045 
<a name="l00049"></a><a class="code" href="classsf_1_1RenderImage.htm#a708db4ce9884215d98fbec9fc806b7d">00049</a> <a class="code" href="classsf_1_1RenderImage.htm#a708db4ce9884215d98fbec9fc806b7d" title="Destructor.">RenderImage::~RenderImage</a>()
<a name="l00050"></a>00050 {
<a name="l00051"></a>00051     <span class="comment">// Destroy the implementation</span>
<a name="l00052"></a>00052     <span class="keyword">delete</span> myRenderImage;
<a name="l00053"></a>00053 }
<a name="l00054"></a>00054 
<a name="l00055"></a>00055 
<a name="l00059"></a><a class="code" href="classsf_1_1RenderImage.htm#3ec48e42ee7d39b07d0a87ddbbc3363c">00059</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1RenderImage.htm#3ec48e42ee7d39b07d0a87ddbbc3363c" title="Create the render image from its dimensions.">RenderImage::Create</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <span class="keywordtype">bool</span> DepthBuffer)
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     <span class="comment">// Make sure render-images are supported</span>
<a name="l00062"></a>00062     <span class="keywordflow">if</span> (!<a class="code" href="classsf_1_1RenderImage.htm#34ccb150c6e55aa3da14fa0956f77389" title="Check whether the system supports render images or not.">CanUseRenderImage</a>())
<a name="l00063"></a>00063     {
<a name="l00064"></a>00064         std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (your system doesn't support this feature)"</span> &lt;&lt; std::endl;
<a name="l00065"></a>00065         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00066"></a>00066     }
<a name="l00067"></a>00067 
<a name="l00068"></a>00068     <span class="comment">// Create the image</span>
<a name="l00069"></a>00069     <span class="keywordflow">if</span> (!myImage.<a class="code" href="classsf_1_1Image.htm#4e2ce8821e8de36462604bbf99f39cde" title="Create an empty image.">Create</a>(Width, Height))
<a name="l00070"></a>00070     {
<a name="l00071"></a>00071         std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (failed to create the target image)"</span> &lt;&lt; std::endl;
<a name="l00072"></a>00072         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00073"></a>00073     }
<a name="l00074"></a>00074 
<a name="l00075"></a>00075     <span class="comment">// Adjust the view</span>
<a name="l00076"></a>00076     <a class="code" href="classsf_1_1RenderTarget.htm#16db9179a7f035c59b8ecdd10cc2e699" title="Get the default view of the window for read / write.">GetDefaultView</a>().<a class="code" href="classsf_1_1View.htm#a5c2ac8985a573632f9a1e95d56cc2ee" title="Rebuild the view from a rectangle.">SetFromRect</a>(<a class="code" href="classsf_1_1Rect.htm">FloatRect</a>(0, 0, static_cast&lt;float&gt;(Width), static_cast&lt;float&gt;(Height)));
<a name="l00077"></a>00077 
<a name="l00078"></a>00078     <span class="comment">// Create the implementation</span>
<a name="l00079"></a>00079     <span class="keyword">delete</span> myRenderImage;
<a name="l00080"></a>00080     <span class="keywordflow">if</span> (priv::RenderImageImplFBO::IsSupported())
<a name="l00081"></a>00081     {
<a name="l00082"></a>00082         myRenderImage = <span class="keyword">new</span> priv::RenderImageImplFBO(myImage);
<a name="l00083"></a>00083     }
<a name="l00084"></a>00084     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (priv::RenderImageImplPBuffer::IsSupported())
<a name="l00085"></a>00085     {
<a name="l00086"></a>00086         myRenderImage = <span class="keyword">new</span> priv::RenderImageImplPBuffer(myImage);
<a name="l00087"></a>00087     }
<a name="l00088"></a>00088     <span class="keywordflow">else</span>
<a name="l00089"></a>00089     {
<a name="l00090"></a>00090         myRenderImage = NULL;
<a name="l00091"></a>00091         std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (no implementation is supported)"</span> &lt;&lt; std::endl;
<a name="l00092"></a>00092         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00093"></a>00093     }
<a name="l00094"></a>00094 
<a name="l00095"></a>00095     <span class="comment">// Initialize the render image</span>
<a name="l00096"></a>00096     <span class="keywordflow">if</span> (!myRenderImage-&gt;Create(DepthBuffer))
<a name="l00097"></a>00097         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00098"></a>00098 
<a name="l00099"></a>00099     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00100"></a>00100 }
<a name="l00101"></a>00101 
<a name="l00102"></a>00102 
<a name="l00107"></a><a class="code" href="classsf_1_1RenderImage.htm#6bbe2da13aca007c504d8328feb874dd">00107</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1RenderImage.htm#6bbe2da13aca007c504d8328feb874dd" title="Activate of deactivate the render-image as the current target for rendering.">RenderImage::SetActive</a>(<span class="keywordtype">bool</span> Active)<span class="keyword"> const</span>
<a name="l00108"></a>00108 <span class="keyword"></span>{
<a name="l00109"></a>00109     <span class="keywordflow">return</span> myRenderImage &amp;&amp; myRenderImage-&gt;Activate(Active);
<a name="l00110"></a>00110 }
<a name="l00111"></a>00111 
<a name="l00112"></a>00112 
<a name="l00116"></a><a class="code" href="classsf_1_1RenderImage.htm#946abb59923dceb6efb1970b7b681675">00116</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1RenderImage.htm#946abb59923dceb6efb1970b7b681675" title="Get the width of the rendering region of the image.">RenderImage::GetWidth</a>()<span class="keyword"> const</span>
<a name="l00117"></a>00117 <span class="keyword"></span>{
<a name="l00118"></a>00118     <span class="keywordflow">return</span> myImage.<a class="code" href="classsf_1_1Image.htm#896f09a4eb769b5b866b6dde9c1a25e7" title="Return the width of the image.">GetWidth</a>();
<a name="l00119"></a>00119 }
<a name="l00120"></a>00120 
<a name="l00121"></a>00121 
<a name="l00125"></a><a class="code" href="classsf_1_1RenderImage.htm#fa7f01ed560b796ac44153d85b6bf2c4">00125</a> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <a class="code" href="classsf_1_1RenderImage.htm#fa7f01ed560b796ac44153d85b6bf2c4" title="Get the height of the rendering region of the image.">RenderImage::GetHeight</a>()<span class="keyword"> const</span>
<a name="l00126"></a>00126 <span class="keyword"></span>{
<a name="l00127"></a>00127     <span class="keywordflow">return</span> myImage.<a class="code" href="classsf_1_1Image.htm#f2131512b6290fd96fd10c539723fe89" title="Return the height of the image.">GetHeight</a>();
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 
<a name="l00134"></a><a class="code" href="classsf_1_1RenderImage.htm#4c7ebb63910afc9b72f4fa332bf88ad0">00134</a> <span class="keyword">const</span> <a class="code" href="classsf_1_1Image.htm" title="Image is the low-level class for loading and manipulating images.">Image</a>&amp; <a class="code" href="classsf_1_1RenderImage.htm#4c7ebb63910afc9b72f4fa332bf88ad0" title="Get the target image.">RenderImage::GetImage</a>()<span class="keyword"> const</span>
<a name="l00135"></a>00135 <span class="keyword"></span>{
<a name="l00136"></a>00136     <span class="keywordflow">return</span> myImage;
<a name="l00137"></a>00137 }
<a name="l00138"></a>00138 
<a name="l00139"></a>00139 
<a name="l00143"></a><a class="code" href="classsf_1_1RenderImage.htm#34ccb150c6e55aa3da14fa0956f77389">00143</a> <span class="keywordtype">bool</span> <a class="code" href="classsf_1_1RenderImage.htm#34ccb150c6e55aa3da14fa0956f77389" title="Check whether the system supports render images or not.">RenderImage::CanUseRenderImage</a>()
<a name="l00144"></a>00144 {
<a name="l00145"></a>00145     <span class="keywordflow">return</span> priv::RenderImageImplFBO::IsSupported() ||
<a name="l00146"></a>00146            priv::RenderImageImplPBuffer::IsSupported();
<a name="l00147"></a>00147 }
<a name="l00148"></a>00148 
<a name="l00149"></a>00149 
<a name="l00153"></a>00153 <span class="keywordtype">bool</span> RenderImage::Activate(<span class="keywordtype">bool</span> Active)
<a name="l00154"></a>00154 {
<a name="l00155"></a>00155     <span class="keywordflow">return</span> <a class="code" href="classsf_1_1RenderImage.htm#6bbe2da13aca007c504d8328feb874dd" title="Activate of deactivate the render-image as the current target for rendering.">SetActive</a>(Active);
<a name="l00156"></a>00156 }
<a name="l00157"></a>00157 
<a name="l00158"></a>00158 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
