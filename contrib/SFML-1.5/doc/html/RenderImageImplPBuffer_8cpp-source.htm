<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>RenderImageImplPBuffer.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2008 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/Win32/RenderImageImplPBuffer.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Graphics/Image.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Graphics/GraphicsContext.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>sf
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 <span class="keyword">namespace </span>priv
<a name="l00037"></a>00037 {
<a name="l00041"></a>00041 RenderImageImplPBuffer::RenderImageImplPBuffer(Image&amp; TargetImage) :
<a name="l00042"></a>00042 RenderImageImpl(TargetImage),
<a name="l00043"></a>00043 myPBuffer      (NULL),
<a name="l00044"></a>00044 myDeviceContext(NULL),
<a name="l00045"></a>00045 myContext      (NULL),
<a name="l00046"></a>00046 myUpdating     (false)
<a name="l00047"></a>00047 {
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 }
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 
<a name="l00055"></a>00055 RenderImageImplPBuffer::~RenderImageImplPBuffer()
<a name="l00056"></a>00056 {
<a name="l00057"></a>00057     <span class="keywordflow">if</span> (myPBuffer &amp;&amp; myDeviceContext &amp;&amp; myContext)
<a name="l00058"></a>00058     {
<a name="l00059"></a>00059         wglDeleteContext(myContext);
<a name="l00060"></a>00060         wglReleasePbufferDCARB(myPBuffer, myDeviceContext);
<a name="l00061"></a>00061         wglDestroyPbufferARB(myPBuffer);
<a name="l00062"></a>00062     }
<a name="l00063"></a>00063 }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 
<a name="l00069"></a>00069 <span class="keywordtype">bool</span> RenderImageImplPBuffer::IsSupported()
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071     <span class="comment">// Make sure we have a valid context</span>
<a name="l00072"></a>00072     priv::GraphicsContext Ctx;
<a name="l00073"></a>00073 
<a name="l00074"></a>00074     <span class="keywordflow">return</span> wglewIsSupported(<span class="stringliteral">"WGL_ARB_pbuffer"</span>) &amp;&amp;
<a name="l00075"></a>00075            wglewIsSupported(<span class="stringliteral">"WGL_ARB_pixel_format"</span>);
<a name="l00076"></a>00076 }
<a name="l00077"></a>00077 
<a name="l00078"></a>00078 
<a name="l00082"></a>00082 <span class="keywordtype">bool</span> RenderImageImplPBuffer::Create(<span class="keywordtype">bool</span> DepthBuffer)
<a name="l00083"></a>00083 {
<a name="l00084"></a>00084     <span class="comment">// Extract the image dimensions</span>
<a name="l00085"></a>00085     <span class="keywordtype">int</span> Width  = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(myImage.GetWidth());
<a name="l00086"></a>00086     <span class="keywordtype">int</span> Height = <span class="keyword">static_cast&lt;</span><span class="keywordtype">int</span><span class="keyword">&gt;</span>(myImage.GetHeight());
<a name="l00087"></a>00087 
<a name="l00088"></a>00088     <span class="comment">// Make sure we have a valid context</span>
<a name="l00089"></a>00089     priv::GraphicsContext Ctx;
<a name="l00090"></a>00090 
<a name="l00091"></a>00091     <span class="comment">// Get the current HDC</span>
<a name="l00092"></a>00092     HDC CurrentDeviceContext = wglGetCurrentDC();
<a name="l00093"></a>00093 
<a name="l00094"></a>00094     <span class="comment">// Define the minimum PBuffer attributes</span>
<a name="l00095"></a>00095     <span class="keywordtype">int</span> Attributes[] =
<a name="l00096"></a>00096     {
<a name="l00097"></a>00097         WGL_SUPPORT_OPENGL_ARB,  GL_TRUE,
<a name="l00098"></a>00098         WGL_DRAW_TO_PBUFFER_ARB, GL_TRUE,
<a name="l00099"></a>00099         WGL_RED_BITS_ARB,        8,
<a name="l00100"></a>00100         WGL_GREEN_BITS_ARB,      8,
<a name="l00101"></a>00101         WGL_BLUE_BITS_ARB,       8,
<a name="l00102"></a>00102         WGL_ALPHA_BITS_ARB,      8,
<a name="l00103"></a>00103         WGL_DEPTH_BITS_ARB,      (DepthBuffer ? 24 : 0),
<a name="l00104"></a>00104         WGL_DOUBLE_BUFFER_ARB,   GL_FALSE,
<a name="l00105"></a>00105         0
<a name="l00106"></a>00106     };
<a name="l00107"></a>00107 
<a name="l00108"></a>00108     <span class="comment">// Select the best pixel format for our attributes</span>
<a name="l00109"></a>00109     <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> NbFormats = 0;
<a name="l00110"></a>00110     <span class="keywordtype">int</span> PixelFormat = -1;
<a name="l00111"></a>00111     wglChoosePixelFormatARB(CurrentDeviceContext, Attributes, NULL, 1, &amp;PixelFormat, &amp;NbFormats);
<a name="l00112"></a>00112 
<a name="l00113"></a>00113     <span class="comment">// Make sure one pixel format has been found</span>
<a name="l00114"></a>00114     <span class="keywordflow">if</span> (NbFormats == 0)
<a name="l00115"></a>00115     {
<a name="l00116"></a>00116         std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (failed to find a suitable pixel format for PBuffer)"</span> &lt;&lt; std::endl;
<a name="l00117"></a>00117         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00118"></a>00118     }
<a name="l00119"></a>00119 
<a name="l00120"></a>00120     <span class="comment">// Create the PBuffer and its OpenGL context</span>
<a name="l00121"></a>00121     myPBuffer       = wglCreatePbufferARB(CurrentDeviceContext, PixelFormat, Width, Height, NULL);
<a name="l00122"></a>00122     myDeviceContext = wglGetPbufferDCARB(myPBuffer);
<a name="l00123"></a>00123     myContext       = wglCreateContext(myDeviceContext);
<a name="l00124"></a>00124 
<a name="l00125"></a>00125     <span class="comment">// Check the actual size of the PBuffer</span>
<a name="l00126"></a>00126     <span class="keywordtype">int</span> ActualWidth, ActualHeight;
<a name="l00127"></a>00127     wglQueryPbufferARB(myPBuffer, WGL_PBUFFER_WIDTH_ARB, &amp;ActualWidth);
<a name="l00128"></a>00128     wglQueryPbufferARB(myPBuffer, WGL_PBUFFER_HEIGHT_ARB, &amp;ActualHeight);
<a name="l00129"></a>00129     <span class="keywordflow">if</span> ((ActualWidth != Width) || (ActualHeight != Height))
<a name="l00130"></a>00130     {
<a name="l00131"></a>00131         std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (failed to match the requested size). "</span>
<a name="l00132"></a>00132                   &lt;&lt; <span class="stringliteral">"Size: "</span> &lt;&lt; ActualWidth &lt;&lt; <span class="stringliteral">"x"</span> &lt;&lt; ActualHeight &lt;&lt; <span class="stringliteral">" - "</span>
<a name="l00133"></a>00133                   &lt;&lt; <span class="stringliteral">"Requested: "</span> &lt;&lt; Width &lt;&lt; <span class="stringliteral">"x"</span> &lt;&lt; Height
<a name="l00134"></a>00134                   &lt;&lt; std::endl;
<a name="l00135"></a>00135         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00136"></a>00136     }
<a name="l00137"></a>00137 
<a name="l00138"></a>00138     <span class="comment">// Check errors</span>
<a name="l00139"></a>00139     <span class="keywordflow">if</span> (!myPBuffer || !myDeviceContext || !myContext)
<a name="l00140"></a>00140     {
<a name="l00141"></a>00141         std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (failed to create PBuffer)"</span> &lt;&lt; std::endl;
<a name="l00142"></a>00142         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00143"></a>00143     }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145     <span class="comment">// Share the PBuffer context with other SFML contexts</span>
<a name="l00146"></a>00146     HGLRC CurrentContext = wglGetCurrentContext();
<a name="l00147"></a>00147     <span class="keywordflow">if</span> (CurrentContext)
<a name="l00148"></a>00148         wglShareLists(CurrentContext, myContext);
<a name="l00149"></a>00149 
<a name="l00150"></a>00150     myUpdating = <span class="keyword">false</span>;
<a name="l00151"></a>00151 
<a name="l00152"></a>00152     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00153"></a>00153 }
<a name="l00154"></a>00154 
<a name="l00155"></a>00155 
<a name="l00159"></a>00159 <span class="keywordtype">bool</span> RenderImageImplPBuffer::Activate(<span class="keywordtype">bool</span> Active)
<a name="l00160"></a>00160 {
<a name="l00161"></a>00161     <span class="keywordflow">if</span> (Active)
<a name="l00162"></a>00162     {
<a name="l00163"></a>00163         <span class="keywordflow">if</span> (myDeviceContext &amp;&amp; myContext &amp;&amp; (wglGetCurrentContext() != myContext))
<a name="l00164"></a>00164         {
<a name="l00165"></a>00165             <span class="comment">// Save the previous bind</span>
<a name="l00166"></a>00166             myPrevDeviceContext = wglGetCurrentDC();
<a name="l00167"></a>00167             myPrevContext = wglGetCurrentContext();
<a name="l00168"></a>00168 
<a name="l00169"></a>00169             <span class="comment">// Bind the PBuffer</span>
<a name="l00170"></a>00170             <span class="keywordflow">if</span> (!wglMakeCurrent(myDeviceContext, myContext))
<a name="l00171"></a>00171             {
<a name="l00172"></a>00172                 std::cout &lt;&lt; <span class="stringliteral">"Failed to activate render image"</span> &lt;&lt; std::endl;
<a name="l00173"></a>00173                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00174"></a>00174             }
<a name="l00175"></a>00175         }
<a name="l00176"></a>00176     }
<a name="l00177"></a>00177     <span class="keywordflow">else</span>
<a name="l00178"></a>00178     {
<a name="l00179"></a>00179         <span class="keywordflow">if</span> (wglGetCurrentContext() == myContext)
<a name="l00180"></a>00180         {
<a name="l00181"></a>00181             <span class="comment">// Unbind the PBuffer</span>
<a name="l00182"></a>00182             <span class="keywordflow">if</span> (!wglMakeCurrent(NULL, NULL))
<a name="l00183"></a>00183             {
<a name="l00184"></a>00184                 std::cout &lt;&lt; <span class="stringliteral">"Failed to deactivate render image"</span> &lt;&lt; std::endl;
<a name="l00185"></a>00185                 <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00186"></a>00186             }
<a name="l00187"></a>00187 
<a name="l00188"></a>00188             <span class="comment">// Restore the previous bind</span>
<a name="l00189"></a>00189             <span class="keywordflow">if</span> (myPrevDeviceContext &amp;&amp; myPrevContext)
<a name="l00190"></a>00190                 wglMakeCurrent(myPrevDeviceContext, myPrevContext);
<a name="l00191"></a>00191         }
<a name="l00192"></a>00192 
<a name="l00193"></a>00193         <span class="comment">// We have to schedule an external update for the target image</span>
<a name="l00194"></a>00194         <span class="keywordflow">if</span> (!myUpdating)
<a name="l00195"></a>00195             myImage.ScheduleTextureUpdate(<span class="keyword">this</span>);
<a name="l00196"></a>00196     }
<a name="l00197"></a>00197 
<a name="l00198"></a>00198     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00199"></a>00199 }
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 
<a name="l00205"></a>00205 <span class="keywordtype">bool</span> RenderImageImplPBuffer::UpdateImage(Image&amp; ImageToUpdate)
<a name="l00206"></a>00206 {
<a name="l00207"></a>00207     myUpdating = <span class="keyword">true</span>;
<a name="l00208"></a>00208 
<a name="l00209"></a>00209     <span class="comment">// Bind the P-Buffer</span>
<a name="l00210"></a>00210     <span class="keywordflow">if</span> (Activate(<span class="keyword">true</span>))
<a name="l00211"></a>00211     {
<a name="l00212"></a>00212         <span class="comment">// Copy its content to the image's texture</span>
<a name="l00213"></a>00213         GLCheck(glBindTexture(GL_TEXTURE_2D, ImageToUpdate.myTexture));
<a name="l00214"></a>00214         GLCheck(glCopyTexSubImage2D(GL_TEXTURE_2D, 0, 0, 0, 0, 0, ImageToUpdate.GetWidth(), ImageToUpdate.GetHeight()));
<a name="l00215"></a>00215 
<a name="l00216"></a>00216         <span class="comment">// Unbind the P-Buffer</span>
<a name="l00217"></a>00217         Activate(<span class="keyword">false</span>);
<a name="l00218"></a>00218     }
<a name="l00219"></a>00219 
<a name="l00220"></a>00220     myUpdating = <span class="keyword">false</span>;
<a name="l00221"></a>00221 
<a name="l00222"></a>00222     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00223"></a>00223 }
<a name="l00224"></a>00224 
<a name="l00225"></a>00225 } <span class="comment">// namespace priv</span>
<a name="l00226"></a>00226 
<a name="l00227"></a>00227 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
