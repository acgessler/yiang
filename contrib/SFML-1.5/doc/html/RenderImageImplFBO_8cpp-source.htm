<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>RenderImageImplFBO.cpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2008 Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Graphics/RenderImageImplFBO.hpp&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#include &lt;SFML/Graphics/Image.hpp&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#include &lt;SFML/Graphics/GraphicsContext.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#include &lt;iostream&gt;</span>
<a name="l00032"></a>00032 
<a name="l00033"></a>00033 
<a name="l00034"></a>00034 <span class="keyword">namespace </span>sf
<a name="l00035"></a>00035 {
<a name="l00036"></a>00036 <span class="keyword">namespace </span>priv
<a name="l00037"></a>00037 {
<a name="l00041"></a>00041 RenderImageImplFBO::RenderImageImplFBO(Image&amp; TargetImage) :
<a name="l00042"></a>00042 RenderImageImpl(TargetImage),
<a name="l00043"></a>00043 myFrameBuffer  (0),
<a name="l00044"></a>00044 myDepthBuffer  (0)
<a name="l00045"></a>00045 {
<a name="l00046"></a>00046 
<a name="l00047"></a>00047 }
<a name="l00048"></a>00048 
<a name="l00049"></a>00049 
<a name="l00053"></a>00053 RenderImageImplFBO::~RenderImageImplFBO()
<a name="l00054"></a>00054 {
<a name="l00055"></a>00055     <span class="comment">// Make sure we have a valid context</span>
<a name="l00056"></a>00056     priv::GraphicsContext Ctx;
<a name="l00057"></a>00057 
<a name="l00058"></a>00058     <span class="comment">// Destroy the OpenGL depth buffer</span>
<a name="l00059"></a>00059     <span class="keywordflow">if</span> (myDepthBuffer)
<a name="l00060"></a>00060     {
<a name="l00061"></a>00061         GLuint DepthBuffer = <span class="keyword">static_cast&lt;</span>GLuint<span class="keyword">&gt;</span>(myDepthBuffer);
<a name="l00062"></a>00062         GLCheck(glDeleteFramebuffersEXT(1, &amp;DepthBuffer));
<a name="l00063"></a>00063     }
<a name="l00064"></a>00064 
<a name="l00065"></a>00065     <span class="comment">// Destroy the OpenGL frame buffer</span>
<a name="l00066"></a>00066     <span class="keywordflow">if</span> (myFrameBuffer)
<a name="l00067"></a>00067     {
<a name="l00068"></a>00068         GLuint FrameBuffer = <span class="keyword">static_cast&lt;</span>GLuint<span class="keyword">&gt;</span>(myFrameBuffer);
<a name="l00069"></a>00069         GLCheck(glDeleteFramebuffersEXT(1, &amp;FrameBuffer));
<a name="l00070"></a>00070     }
<a name="l00071"></a>00071 }
<a name="l00072"></a>00072 
<a name="l00073"></a>00073 
<a name="l00077"></a>00077 <span class="keywordtype">bool</span> RenderImageImplFBO::IsSupported()
<a name="l00078"></a>00078 {
<a name="l00079"></a>00079     <span class="comment">// Make sure we have a valid context</span>
<a name="l00080"></a>00080     priv::GraphicsContext Ctx;
<a name="l00081"></a>00081 
<a name="l00082"></a>00082     <span class="comment">// TODO : put it back :)</span>
<a name="l00083"></a>00083     <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00084"></a>00084     <span class="comment">//return glewIsSupported("GL_EXT_framebuffer_object") != 0;</span>
<a name="l00085"></a>00085 }
<a name="l00086"></a>00086 
<a name="l00087"></a>00087 
<a name="l00091"></a>00091 <span class="keywordtype">bool</span> RenderImageImplFBO::Create(<span class="keywordtype">bool</span> DepthBuffer)
<a name="l00092"></a>00092 {
<a name="l00093"></a>00093     <span class="comment">// Make sure we have a valid context</span>
<a name="l00094"></a>00094     priv::GraphicsContext Ctx;
<a name="l00095"></a>00095 
<a name="l00096"></a>00096     <span class="comment">// Create the framebuffer object if not already done</span>
<a name="l00097"></a>00097     <span class="keywordflow">if</span> (!myFrameBuffer)
<a name="l00098"></a>00098     {
<a name="l00099"></a>00099         GLuint FrameBuffer = 0;
<a name="l00100"></a>00100         GLCheck(glGenFramebuffersEXT(1, &amp;FrameBuffer));
<a name="l00101"></a>00101         myFrameBuffer = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(FrameBuffer);
<a name="l00102"></a>00102         <span class="keywordflow">if</span> (!myFrameBuffer)
<a name="l00103"></a>00103         {
<a name="l00104"></a>00104             std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (failed to create the frame buffer object)"</span> &lt;&lt; std::endl;
<a name="l00105"></a>00105             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00106"></a>00106         }
<a name="l00107"></a>00107     }
<a name="l00108"></a>00108 
<a name="l00109"></a>00109     <span class="comment">// Bind the framebuffer</span>
<a name="l00110"></a>00110     GLCheck(glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, myFrameBuffer));
<a name="l00111"></a>00111 
<a name="l00112"></a>00112     <span class="comment">// Create the depth buffer</span>
<a name="l00113"></a>00113     <span class="keywordflow">if</span> (myDepthBuffer)
<a name="l00114"></a>00114     {
<a name="l00115"></a>00115         GLuint DepthBuffer = <span class="keyword">static_cast&lt;</span>GLuint<span class="keyword">&gt;</span>(myDepthBuffer);
<a name="l00116"></a>00116         GLCheck(glDeleteRenderbuffersEXT(1, &amp;DepthBuffer));
<a name="l00117"></a>00117     }
<a name="l00118"></a>00118     <span class="keywordflow">if</span> (DepthBuffer)
<a name="l00119"></a>00119     {
<a name="l00120"></a>00120         GLuint DepthBuffer = 0;
<a name="l00121"></a>00121         GLCheck(glGenRenderbuffersEXT(1, &amp;DepthBuffer));
<a name="l00122"></a>00122         myDepthBuffer = <span class="keyword">static_cast&lt;</span><span class="keywordtype">unsigned</span> <span class="keywordtype">int</span><span class="keyword">&gt;</span>(DepthBuffer);
<a name="l00123"></a>00123         <span class="keywordflow">if</span> (!myDepthBuffer)
<a name="l00124"></a>00124         {
<a name="l00125"></a>00125             std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (failed to create the attached depth buffer)"</span> &lt;&lt; std::endl;
<a name="l00126"></a>00126             <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00127"></a>00127         }
<a name="l00128"></a>00128         GLCheck(glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, myDepthBuffer));
<a name="l00129"></a>00129         GLCheck(glRenderbufferStorageEXT(GL_RENDERBUFFER_EXT, GL_DEPTH_COMPONENT, myImage.GetWidth(), myImage.GetHeight()));
<a name="l00130"></a>00130         GLCheck(glFramebufferRenderbufferEXT(GL_FRAMEBUFFER_EXT, GL_DEPTH_ATTACHMENT_EXT, GL_RENDERBUFFER_EXT, myDepthBuffer));
<a name="l00131"></a>00131     }
<a name="l00132"></a>00132 
<a name="l00133"></a>00133     <span class="comment">// Link the image to the frame buffer</span>
<a name="l00134"></a>00134     GLCheck(glFramebufferTexture2DEXT(GL_FRAMEBUFFER_EXT, GL_COLOR_ATTACHMENT0_EXT, GL_TEXTURE_2D, myImage.myTexture, 0));
<a name="l00135"></a>00135 
<a name="l00136"></a>00136     <span class="comment">// A final check, just to be sure...</span>
<a name="l00137"></a>00137     <span class="keywordflow">if</span> (glCheckFramebufferStatusEXT(GL_FRAMEBUFFER_EXT) != GL_FRAMEBUFFER_COMPLETE_EXT)
<a name="l00138"></a>00138     {
<a name="l00139"></a>00139         GLCheck(glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0));
<a name="l00140"></a>00140         std::cerr &lt;&lt; <span class="stringliteral">"Impossible to create render image (failed to link the target image to the frame buffer)"</span> &lt;&lt; std::endl;
<a name="l00141"></a>00141         <span class="keywordflow">return</span> <span class="keyword">false</span>;
<a name="l00142"></a>00142     }
<a name="l00143"></a>00143 
<a name="l00144"></a>00144     <span class="comment">// Unbind the buffers</span>
<a name="l00145"></a>00145     Activate(<span class="keyword">false</span>);
<a name="l00146"></a>00146 
<a name="l00147"></a>00147     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00148"></a>00148 }
<a name="l00149"></a>00149 
<a name="l00150"></a>00150 
<a name="l00154"></a>00154 <span class="keywordtype">bool</span> RenderImageImplFBO::Activate(<span class="keywordtype">bool</span> Active)
<a name="l00155"></a>00155 {
<a name="l00156"></a>00156     <span class="comment">// Make sure we have a valid context</span>
<a name="l00157"></a>00157     priv::GraphicsContext Ctx;
<a name="l00158"></a>00158 
<a name="l00159"></a>00159     <span class="keywordflow">if</span> (Active)
<a name="l00160"></a>00160     {
<a name="l00161"></a>00161         <span class="comment">// Bind the buffers</span>
<a name="l00162"></a>00162         GLCheck(glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, myFrameBuffer));
<a name="l00163"></a>00163         GLCheck(glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, myDepthBuffer));
<a name="l00164"></a>00164     }
<a name="l00165"></a>00165     <span class="keywordflow">else</span>
<a name="l00166"></a>00166     {
<a name="l00167"></a>00167         <span class="comment">// Unbind the buffers</span>
<a name="l00168"></a>00168         GLCheck(glBindFramebufferEXT(GL_FRAMEBUFFER_EXT, 0));
<a name="l00169"></a>00169         GLCheck(glBindRenderbufferEXT(GL_RENDERBUFFER_EXT, 0));
<a name="l00170"></a>00170 
<a name="l00171"></a>00171         <span class="comment">// After the RenderImage has been used, we have to notify</span>
<a name="l00172"></a>00172         <span class="comment">// the underlying image that its pixels have been modified</span>
<a name="l00173"></a>00173         myImage.myNeedTextureUpdate = <span class="keyword">false</span>;
<a name="l00174"></a>00174         myImage.myNeedArrayUpdate   = <span class="keyword">true</span>;
<a name="l00175"></a>00175         myImage.myPixelsFlipped     = <span class="keyword">true</span>;
<a name="l00176"></a>00176     }
<a name="l00177"></a>00177 
<a name="l00178"></a>00178     <span class="keywordflow">return</span> <span class="keyword">true</span>;
<a name="l00179"></a>00179 }
<a name="l00180"></a>00180 
<a name="l00181"></a>00181 } <span class="comment">// namespace priv</span>
<a name="l00182"></a>00182 
<a name="l00183"></a>00183 } <span class="comment">// namespace sf</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
