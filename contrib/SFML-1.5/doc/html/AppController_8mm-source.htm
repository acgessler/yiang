<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>AppController.mm</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Lucas Soltic (ceylow@gmail.com) and Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 
<a name="l00027"></a>00027 <span class="comment">// Headers</span>
<a name="l00029"></a>00029 <span class="comment"></span><span class="preprocessor">#import &lt;SFML/Window/Cocoa/AppController.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#import &lt;SFML/Window/Cocoa/GLKit.h&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#import &lt;SFML/System.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#import &lt;ApplicationServices/ApplicationServices.h&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#import &lt;iostream&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 <span class="comment">// AppController singleton object</span>
<a name="l00037"></a>00037 <span class="keyword">static</span> AppController *shared = nil;
<a name="l00038"></a>00038 
<a name="l00039"></a>00039 
<a name="l00040"></a>00040 <span class="comment">/* setAppleMenu disappeared from the headers in 10.4 */</span>
<a name="l00041"></a>00041 <span class="preprocessor">#if MAC_OS_X_VERSION_MAX_ALLOWED &gt;= MAC_OS_X_VERSION_10_4</span>
<a name="l00042"></a>00042 <span class="preprocessor"></span><span class="keyword">@interface </span>NSApplication (SFML)
<a name="l00043"></a>00043 - (void)setAppleMenu:(NSMenu *)menu;
<a name="l00044"></a>00044 <span class="keyword">@end</span>
<a name="l00045"></a>00045 <span class="preprocessor">#endif</span>
<a name="l00046"></a>00046 <span class="preprocessor"></span>
<a name="l00047"></a>00047 <span class="preprocessor">#define ENABLE_FADE_OPERATIONS 1</span>
<a name="l00048"></a>00048 <span class="preprocessor"></span>
<a name="l00049"></a>00049 <span class="keyword">@implementation </span>NSApplication (SFML)
<a name="l00050"></a>00050 
<a name="l00051"></a>00051 - (void)setRunning:(BOOL)flag
<a name="l00052"></a>00052 {
<a name="l00053"></a>00053     <span class="comment">// Note: _running is a short, not a BOOL</span>
<a name="l00054"></a>00054     <span class="keywordflow">if</span> (flag)
<a name="l00055"></a>00055         _running = 1;
<a name="l00056"></a>00056     <span class="keywordflow">else</span>
<a name="l00057"></a>00057         _running = 0;
<a name="l00058"></a>00058 }
<a name="l00059"></a>00059 
<a name="l00060"></a>00060 <span class="keyword">@end</span>
<a name="l00061"></a>00061 
<a name="l00062"></a>00062 
<a name="l00063"></a>00063 <span class="keyword">@implementation </span>AppController
<a name="l00064"></a>00064 
<a name="l00065"></a>00065 
<a name="l00072"></a>00072 - (id)init
<a name="l00073"></a>00073 {
<a name="l00074"></a>00074     <span class="keyword">self</span> = [<span class="keyword">super</span> init];
<a name="l00075"></a>00075     
<a name="l00076"></a>00076     <span class="keywordflow">if</span> (<span class="keyword">self</span> != nil) {
<a name="l00077"></a>00077         myOwningEventLoop = NO;
<a name="l00078"></a>00078         
<a name="l00079"></a>00079         <span class="comment">// Save the desktop mode</span>
<a name="l00080"></a>00080         myDesktopMode = <a class="code" href="classsf_1_1VideoMode.htm#0b29193258c4855f75337e62f2b56eea" title="Get the current desktop video mode.">sf::VideoMode::GetDesktopMode</a>();
<a name="l00081"></a>00081         myPrevMode = myDesktopMode;
<a name="l00082"></a>00082         
<a name="l00083"></a>00083         <span class="comment">// Make the app autorelease pool</span>
<a name="l00084"></a>00084         myMainPool = [[NSAutoreleasePool alloc] init];
<a name="l00085"></a>00085         
<a name="l00086"></a>00086         <span class="comment">// Don't go on if the user handles the app</span>
<a name="l00087"></a>00087         <span class="keywordflow">if</span> (![NSApp isRunning])
<a name="l00088"></a>00088         {
<a name="l00089"></a>00089             <span class="comment">// Force our application to appear in the Dock and make it able</span>
<a name="l00090"></a>00090             <span class="comment">// to get focus (even when it's a raw executable)</span>
<a name="l00091"></a>00091             ProcessSerialNumber psn;
<a name="l00092"></a>00092             
<a name="l00093"></a>00093             <span class="keywordflow">if</span> (!GetCurrentProcess(&amp;psn)) {
<a name="l00094"></a>00094                 TransformProcessType(&amp;psn, kProcessTransformToForegroundApplication);
<a name="l00095"></a>00095                 SetFrontProcess(&amp;psn);
<a name="l00096"></a>00096             }
<a name="l00097"></a>00097             
<a name="l00098"></a>00098             <span class="comment">// Make the app</span>
<a name="l00099"></a>00099             [NSApplication sharedApplication];
<a name="l00100"></a>00100             
<a name="l00101"></a>00101             NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
<a name="l00102"></a>00102             <span class="comment">// I want to go back to the desktop mode</span>
<a name="l00103"></a>00103             <span class="comment">// if we've a fullscreen window when hiding</span>
<a name="l00104"></a>00104             [nc addObserver:self
<a name="l00105"></a>00105                    selector:@selector(applicationWillHide:)
<a name="l00106"></a>00106                        name:NSApplicationWillHideNotification
<a name="l00107"></a>00107                      object:NSApp];
<a name="l00108"></a>00108             
<a name="l00109"></a>00109             <span class="comment">// And restore de fullscreen mode when unhiding</span>
<a name="l00110"></a>00110             [nc addObserver:self
<a name="l00111"></a>00111                    selector:@selector(applicationWillUnhide:)
<a name="l00112"></a>00112                        name:NSApplicationWillUnhideNotification
<a name="l00113"></a>00113                      object:NSApp];
<a name="l00114"></a>00114             
<a name="l00115"></a>00115             <span class="comment">// Go back to desktop mode before exit</span>
<a name="l00116"></a>00116             [nc addObserver:self
<a name="l00117"></a>00117                    selector:@selector(applicationWillTerminate:)
<a name="l00118"></a>00118                        name:NSApplicationWillTerminateNotification
<a name="l00119"></a>00119                      object:NSApp];
<a name="l00120"></a>00120             
<a name="l00121"></a>00121             <span class="keywordflow">if</span> ([NSApp mainMenu] == nil) {
<a name="l00122"></a>00122                 [<span class="keyword">self</span> makeMenuBar];
<a name="l00123"></a>00123             }
<a name="l00124"></a>00124         }
<a name="l00125"></a>00125     }
<a name="l00126"></a>00126     
<a name="l00127"></a>00127     <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00128"></a>00128 }
<a name="l00129"></a>00129 
<a name="l00130"></a>00130 
<a name="l00134"></a>00134 - (void)dealloc
<a name="l00135"></a>00135 {
<a name="l00136"></a>00136     [[NSNotificationCenter defaultCenter] removeObserver:self];
<a name="l00137"></a>00137     [myFullscreenWrapper release];
<a name="l00138"></a>00138     [<span class="keyword">super</span> dealloc];
<a name="l00139"></a>00139 }
<a name="l00140"></a>00140 
<a name="l00141"></a>00141 
<a name="l00145"></a>00145 + (AppController *)sharedController
<a name="l00146"></a>00146 {
<a name="l00147"></a>00147     <span class="keywordflow">if</span> (nil == shared)
<a name="l00148"></a>00148         shared = [[AppController alloc] init];
<a name="l00149"></a>00149     
<a name="l00150"></a>00150     <span class="keywordflow">return</span> shared;
<a name="l00151"></a>00151 }
<a name="l00152"></a>00152 
<a name="l00153"></a>00153 
<a name="l00157"></a>00157 - (void)applicationWillHide:(NSNotification *)aNotification
<a name="l00158"></a>00158 {
<a name="l00159"></a>00159     <span class="keywordflow">if</span> (myFullscreenWrapper) {
<a name="l00160"></a>00160         myPrevMode = <a class="code" href="classsf_1_1VideoMode.htm#0b29193258c4855f75337e62f2b56eea" title="Get the current desktop video mode.">sf::VideoMode::GetDesktopMode</a>();
<a name="l00161"></a>00161         
<a name="l00162"></a>00162         CFDictionaryRef displayMode = CGDisplayBestModeForParameters (kCGDirectMainDisplay,
<a name="l00163"></a>00163                                                                       myDesktopMode.BitsPerPixel,
<a name="l00164"></a>00164                                                                       myDesktopMode.Width,
<a name="l00165"></a>00165                                                                       myDesktopMode.Height,
<a name="l00166"></a>00166                                                                       NULL);
<a name="l00167"></a>00167         
<a name="l00168"></a>00168         <span class="comment">// Fade to black screen</span>
<a name="l00169"></a>00169         [<span class="keyword">self</span> doFadeOperation:FillScreen time:0.2f sync:true];
<a name="l00170"></a>00170         
<a name="l00171"></a>00171         <span class="comment">// Make the full screen window unvisible</span>
<a name="l00172"></a>00172         [[myFullscreenWrapper window] setAlphaValue:0.0f];
<a name="l00173"></a>00173         
<a name="l00174"></a>00174         <span class="comment">// Switch to the wished display mode</span>
<a name="l00175"></a>00175         CGDisplaySwitchToMode(kCGDirectMainDisplay, displayMode);
<a name="l00176"></a>00176         
<a name="l00177"></a>00177         <span class="comment">// Fade to normal screen</span>
<a name="l00178"></a>00178         [<span class="keyword">self</span> doFadeOperation:CleanScreen time:0.5f sync:false];
<a name="l00179"></a>00179     }
<a name="l00180"></a>00180 }
<a name="l00181"></a>00181 
<a name="l00182"></a>00182 
<a name="l00186"></a>00186 - (void)applicationWillUnhide:(NSNotification *)aNotification
<a name="l00187"></a>00187 {
<a name="l00188"></a>00188     <span class="keywordflow">if</span> (myFullscreenWrapper) {
<a name="l00189"></a>00189         CFDictionaryRef displayMode = CGDisplayBestModeForParameters (kCGDirectMainDisplay,
<a name="l00190"></a>00190                                                                       myPrevMode.BitsPerPixel,
<a name="l00191"></a>00191                                                                       myPrevMode.Width,
<a name="l00192"></a>00192                                                                       myPrevMode.Height,
<a name="l00193"></a>00193                                                                       NULL);
<a name="l00194"></a>00194         
<a name="l00195"></a>00195         <span class="comment">// Fade to a black screen</span>
<a name="l00196"></a>00196         [<span class="keyword">self</span> doFadeOperation:FillScreen time:0.5f sync:true];
<a name="l00197"></a>00197         [NSMenu setMenuBarVisible:NO];
<a name="l00198"></a>00198         
<a name="l00199"></a>00199         <span class="comment">// Switch to the wished display mode</span>
<a name="l00200"></a>00200         CGDisplaySwitchToMode(kCGDirectMainDisplay, displayMode);
<a name="l00201"></a>00201         
<a name="l00202"></a>00202         <span class="comment">// Show the fullscreen window if existing</span>
<a name="l00203"></a>00203         <span class="keywordflow">if</span> (myFullscreenWrapper)
<a name="l00204"></a>00204         {
<a name="l00205"></a>00205                 [[myFullscreenWrapper window] setAlphaValue:1.0f];
<a name="l00206"></a>00206                 [[myFullscreenWrapper window] center];
<a name="l00207"></a>00207         }
<a name="l00208"></a>00208         
<a name="l00209"></a>00209         <span class="comment">// Fade to normal screen</span>
<a name="l00210"></a>00210         [<span class="keyword">self</span> doFadeOperation:CleanScreen time:0.5f sync:false];
<a name="l00211"></a>00211     }
<a name="l00212"></a>00212 }
<a name="l00213"></a>00213 
<a name="l00214"></a>00214 
<a name="l00215"></a>00215 - (void)applicationWillTerminate:(NSNotification *)aNotification
<a name="l00216"></a>00216 {
<a name="l00217"></a>00217     <span class="keywordflow">if</span> (myFullscreenWrapper)
<a name="l00218"></a>00218         [<span class="keyword">self</span> setFullscreenWindow:nil mode:NULL];
<a name="l00219"></a>00219     
<a name="l00220"></a>00220     <span class="comment">// FIXME: should I really do this ? what about the user owned windows ?</span>
<a name="l00221"></a>00221     <span class="comment">// And is this really useful as the application is about to exit ?</span>
<a name="l00222"></a>00222     [NSApp makeWindowsPerform:@selector(close) inOrder:NO];
<a name="l00223"></a>00223 }
<a name="l00224"></a>00224 
<a name="l00228"></a>00228 - (void)makeMenuBar
<a name="l00229"></a>00229 {
<a name="l00230"></a>00230     <span class="comment">// Source taken from SDL 1.3</span>
<a name="l00231"></a>00231     
<a name="l00232"></a>00232     NSString *appName = nil;
<a name="l00233"></a>00233     NSString *title = nil;
<a name="l00234"></a>00234     NSMenu *appleMenu = nil;
<a name="l00235"></a>00235     NSMenu *fileMenu = nil;
<a name="l00236"></a>00236     NSMenu *windowMenu = nil;
<a name="l00237"></a>00237     NSMenuItem *menuItem = nil;
<a name="l00238"></a>00238     NSMenuItem *quitMenuItem = nil;
<a name="l00239"></a>00239     
<a name="l00240"></a>00240     <span class="comment">// Determine the application name</span>
<a name="l00241"></a>00241     appName = [[[NSBundle mainBundle] infoDictionary] objectForKey: @"CFBundleName"];
<a name="l00242"></a>00242     
<a name="l00243"></a>00243     <span class="keywordflow">if</span> (![appName length])
<a name="l00244"></a>00244         appName = [[NSProcessInfo processInfo] processName];
<a name="l00245"></a>00245     
<a name="l00246"></a>00246     
<a name="l00247"></a>00247     <span class="comment">// Create the main menu bar</span>
<a name="l00248"></a>00248     [NSApp setMainMenu:[[NSMenu alloc] init]];
<a name="l00249"></a>00249     
<a name="l00250"></a>00250     <span class="comment">// Create the application menu</span>
<a name="l00251"></a>00251     appleMenu = [[NSMenu alloc] initWithTitle:@""];
<a name="l00252"></a>00252     
<a name="l00253"></a>00253     <span class="comment">// Put menu items</span>
<a name="l00254"></a>00254     <span class="comment">// + 'About' menu item</span>
<a name="l00255"></a>00255     title = [@"About " stringByAppendingString:appName];
<a name="l00256"></a>00256     [appleMenu addItemWithTitle:title
<a name="l00257"></a>00257                          action:@selector(orderFrontStandardAboutPanel:)
<a name="l00258"></a>00258                   keyEquivalent:@""];
<a name="l00259"></a>00259     
<a name="l00260"></a>00260     [appleMenu addItem:[NSMenuItem separatorItem]];
<a name="l00261"></a>00261     
<a name="l00262"></a>00262     <span class="comment">// + 'Hide' menu item</span>
<a name="l00263"></a>00263     title = [@"Hide " stringByAppendingString:appName];
<a name="l00264"></a>00264     [appleMenu addItemWithTitle:title
<a name="l00265"></a>00265                          action:@selector(hide:)
<a name="l00266"></a>00266                   keyEquivalent:@"h"];
<a name="l00267"></a>00267     
<a name="l00268"></a>00268     <span class="comment">// + 'Hide other' menu item</span>
<a name="l00269"></a>00269     menuItem = reinterpret_cast &lt;NSMenuItem *&gt; ([appleMenu addItemWithTitle:@"Hide Others"
<a name="l00270"></a>00270                                                                 action:@selector(hideOtherApplications:)
<a name="l00271"></a>00271                                                          keyEquivalent:@"h"]);
<a name="l00272"></a>00272     [menuItem setKeyEquivalentModifierMask:(NSAlternateKeyMask|NSCommandKeyMask)];
<a name="l00273"></a>00273     
<a name="l00274"></a>00274     <span class="comment">// + 'Show all' menu item</span>
<a name="l00275"></a>00275     [appleMenu addItemWithTitle:@"Show All"
<a name="l00276"></a>00276                          action:@selector(unhideAllApplications:)
<a name="l00277"></a>00277                   keyEquivalent:@""];
<a name="l00278"></a>00278     
<a name="l00279"></a>00279     [appleMenu addItem:[NSMenuItem separatorItem]];
<a name="l00280"></a>00280     
<a name="l00281"></a>00281     <span class="comment">// + 'Quit' menu item</span>
<a name="l00282"></a>00282     title = [@"Quit " stringByAppendingString:appName];
<a name="l00283"></a>00283     quitMenuItem = [[[NSMenuItem alloc]
<a name="l00284"></a>00284                      initWithTitle:title 
<a name="l00285"></a>00285                      action:@selector(terminate:)
<a name="l00286"></a>00286                      keyEquivalent:@"q"] autorelease];
<a name="l00287"></a>00287     <span class="comment">//[quitMenuItem setTarget:self];</span>
<a name="l00288"></a>00288     [appleMenu addItem:quitMenuItem];
<a name="l00289"></a>00289     
<a name="l00290"></a>00290     <span class="comment">// Put the menu into the menubar</span>
<a name="l00291"></a>00291     menuItem = [[NSMenuItem alloc]
<a name="l00292"></a>00292                 initWithTitle:@""
<a name="l00293"></a>00293                 action:nil
<a name="l00294"></a>00294                 keyEquivalent:@""];
<a name="l00295"></a>00295     [menuItem setSubmenu:appleMenu];
<a name="l00296"></a>00296     [[NSApp mainMenu] addItem:menuItem];
<a name="l00297"></a>00297     [menuItem release];
<a name="l00298"></a>00298     
<a name="l00299"></a>00299     <span class="comment">// Tell the application object that this is now the application menu</span>
<a name="l00300"></a>00300     [NSApp setAppleMenu:appleMenu];
<a name="l00301"></a>00301     [appleMenu release];
<a name="l00302"></a>00302     
<a name="l00303"></a>00303     <span class="comment">// 'File' menu</span>
<a name="l00304"></a>00304     fileMenu = [[NSMenu alloc]
<a name="l00305"></a>00305                 initWithTitle:@"File"];
<a name="l00306"></a>00306     
<a name="l00307"></a>00307     <span class="comment">// + 'Close' menu item</span>
<a name="l00308"></a>00308     menuItem = [[NSMenuItem alloc]
<a name="l00309"></a>00309                 initWithTitle:@"Close"
<a name="l00310"></a>00310                 action:@selector(performClose:)
<a name="l00311"></a>00311                 keyEquivalent:@"w"];
<a name="l00312"></a>00312     [fileMenu addItem:menuItem];
<a name="l00313"></a>00313     [menuItem release];
<a name="l00314"></a>00314     
<a name="l00315"></a>00315     <span class="comment">// + 'File' menu item (head)</span>
<a name="l00316"></a>00316     menuItem = [[NSMenuItem alloc]
<a name="l00317"></a>00317                 initWithTitle:@"File"
<a name="l00318"></a>00318                 action:nil
<a name="l00319"></a>00319                 keyEquivalent:@""];
<a name="l00320"></a>00320     [menuItem setSubmenu:fileMenu];
<a name="l00321"></a>00321     [[NSApp mainMenu] addItem:menuItem];
<a name="l00322"></a>00322     [menuItem release];
<a name="l00323"></a>00323     
<a name="l00324"></a>00324     <span class="comment">// 'Window' menu</span>
<a name="l00325"></a>00325     windowMenu = [[NSMenu alloc]
<a name="l00326"></a>00326                   initWithTitle:@"Window"];
<a name="l00327"></a>00327     
<a name="l00328"></a>00328     <span class="comment">// + 'Minimize' menu item</span>
<a name="l00329"></a>00329     menuItem = [[NSMenuItem alloc]
<a name="l00330"></a>00330                 initWithTitle:@"Minimize"
<a name="l00331"></a>00331                 action:@selector(performMiniaturize:)
<a name="l00332"></a>00332                 keyEquivalent:@"m"];
<a name="l00333"></a>00333     [windowMenu addItem:menuItem];
<a name="l00334"></a>00334     [menuItem release];
<a name="l00335"></a>00335     
<a name="l00336"></a>00336     <span class="comment">// + 'Window' menu item (head)</span>
<a name="l00337"></a>00337     menuItem = [[NSMenuItem alloc]
<a name="l00338"></a>00338                 initWithTitle:@"Window"
<a name="l00339"></a>00339                 action:nil keyEquivalent:@""];
<a name="l00340"></a>00340     [menuItem setSubmenu:windowMenu];
<a name="l00341"></a>00341     [[NSApp mainMenu] addItem:menuItem];
<a name="l00342"></a>00342     [menuItem release];
<a name="l00343"></a>00343     
<a name="l00344"></a>00344     <span class="comment">// Tell the application object that this is now the window menu</span>
<a name="l00345"></a>00345     [NSApp setWindowsMenu:windowMenu];
<a name="l00346"></a>00346     [windowMenu release];
<a name="l00347"></a>00347 }
<a name="l00348"></a>00348 
<a name="l00349"></a>00349 
<a name="l00355"></a>00355 - (void)processEvents
<a name="l00356"></a>00356 {
<a name="l00357"></a>00357     <span class="comment">// Check there is a run loop</span>
<a name="l00358"></a>00358     <span class="keywordflow">if</span> (![NSApp isRunning])
<a name="l00359"></a>00359     {
<a name="l00360"></a>00360         <span class="comment">// Get the ownershipt of event handling if not and run</span>
<a name="l00361"></a>00361         [NSApp finishLaunching];
<a name="l00362"></a>00362         [NSApp setRunning:YES];
<a name="l00363"></a>00363         myOwningEventLoop = YES;
<a name="l00364"></a>00364     }
<a name="l00365"></a>00365     
<a name="l00366"></a>00366     <span class="comment">// Clean the autorelease pool</span>
<a name="l00367"></a>00367     [myMainPool release];
<a name="l00368"></a>00368     myMainPool = [[NSAutoreleasePool alloc] init];
<a name="l00369"></a>00369     
<a name="l00370"></a>00370     NSEvent *<span class="keyword">event</span> = nil;
<a name="l00371"></a>00371     
<a name="l00372"></a>00372     <span class="keywordflow">if</span> (myOwningEventLoop)
<a name="l00373"></a>00373     {
<a name="l00374"></a>00374         <span class="comment">// Minimal event loop</span>
<a name="l00375"></a>00375         <span class="keywordflow">while</span> (nil != (event = [NSApp nextEventMatchingMask:NSAnyEventMask
<a name="l00376"></a>00376                                                   untilDate:nil
<a name="l00377"></a>00377                                                      inMode:NSDefaultRunLoopMode
<a name="l00378"></a>00378                                                     dequeue:YES]))
<a name="l00379"></a>00379         {
<a name="l00380"></a>00380             [NSApp sendEvent:event];
<a name="l00381"></a>00381         }
<a name="l00382"></a>00382     }
<a name="l00383"></a>00383 }
<a name="l00384"></a>00384 
<a name="l00385"></a>00385 
<a name="l00390"></a>00390 - (void)setFullscreenWindow:(<a class="code" href="interfaceWindowWrapper.htm" title="WindowWrapper class : handles both imported and self-built windows.">WindowWrapper</a> *)aWrapper mode:(sf::VideoMode *)fullscreenMode
<a name="l00391"></a>00391 {
<a name="l00392"></a>00392     <span class="comment">// If we have a fullscreen window and want to remove it</span>
<a name="l00393"></a>00393     <span class="keywordflow">if</span> (aWrapper == nil &amp;&amp; myFullscreenWrapper)
<a name="l00394"></a>00394     {
<a name="l00395"></a>00395         <span class="comment">// Get the CoreGraphics display mode according to the desktop mode</span>
<a name="l00396"></a>00396         CFDictionaryRef displayMode = CGDisplayBestModeForParameters (kCGDirectMainDisplay,
<a name="l00397"></a>00397                                                                       myDesktopMode.BitsPerPixel,
<a name="l00398"></a>00398                                                                       myDesktopMode.Width,
<a name="l00399"></a>00399                                                                       myDesktopMode.Height,
<a name="l00400"></a>00400                                                                       NULL);
<a name="l00401"></a>00401         
<a name="l00402"></a>00402 <span class="preprocessor">#if ENABLE_FADE_OPERATIONS</span>
<a name="l00403"></a>00403 <span class="preprocessor"></span>        <span class="comment">// Fade to black screen</span>
<a name="l00404"></a>00404         [<span class="keyword">self</span> doFadeOperation:FillScreen time:0.2f sync:true];
<a name="l00405"></a>00405 <span class="preprocessor">#endif</span>
<a name="l00406"></a>00406 <span class="preprocessor"></span>        
<a name="l00407"></a>00407         <span class="comment">// Switch to the desktop display mode</span>
<a name="l00408"></a>00408         CGDisplaySwitchToMode(kCGDirectMainDisplay, displayMode);
<a name="l00409"></a>00409         
<a name="l00410"></a>00410         <span class="comment">// Close the window</span>
<a name="l00411"></a>00411         [[myFullscreenWrapper window] close];
<a name="l00412"></a>00412         
<a name="l00413"></a>00413         <span class="comment">// Show the menu bar</span>
<a name="l00414"></a>00414         [NSMenu setMenuBarVisible:YES];
<a name="l00415"></a>00415         
<a name="l00416"></a>00416 <span class="preprocessor">#if ENABLE_FADE_OPERATIONS</span>
<a name="l00417"></a>00417 <span class="preprocessor"></span>        <span class="comment">// Fade to normal screen</span>
<a name="l00418"></a>00418         [<span class="keyword">self</span> doFadeOperation:CleanScreen time:0.5f sync:true];
<a name="l00419"></a>00419 <span class="preprocessor">#endif</span>
<a name="l00420"></a>00420 <span class="preprocessor"></span>        
<a name="l00421"></a>00421         <span class="comment">// Release the saved window wrapper</span>
<a name="l00422"></a>00422         myFullscreenWrapper = nil;
<a name="l00423"></a>00423     }
<a name="l00424"></a>00424     <span class="keywordflow">else</span> <span class="keywordflow">if</span> (aWrapper)
<a name="l00425"></a>00425     {
<a name="l00426"></a>00426         assert(fullscreenMode != NULL);
<a name="l00427"></a>00427         
<a name="l00428"></a>00428         <span class="comment">// Get the CoreGraphics display mode according to the given sf mode</span>
<a name="l00429"></a>00429         CFDictionaryRef displayMode = CGDisplayBestModeForParameters (kCGDirectMainDisplay,
<a name="l00430"></a>00430                                                                       fullscreenMode-&gt;BitsPerPixel,
<a name="l00431"></a>00431                                                                       fullscreenMode-&gt;Width,
<a name="l00432"></a>00432                                                                       fullscreenMode-&gt;Height,
<a name="l00433"></a>00433                                                                       NULL);
<a name="l00434"></a>00434         
<a name="l00435"></a>00435 <span class="preprocessor">#if ENABLE_FADE_OPERATIONS</span>
<a name="l00436"></a>00436 <span class="preprocessor"></span>        <span class="comment">// Fade to a black screen</span>
<a name="l00437"></a>00437         [<span class="keyword">self</span> doFadeOperation:FillScreen time:0.5f sync:true];
<a name="l00438"></a>00438 <span class="preprocessor">#endif</span>
<a name="l00439"></a>00439 <span class="preprocessor"></span>        
<a name="l00440"></a>00440         <span class="keywordflow">if</span> (!myFullscreenWrapper)
<a name="l00441"></a>00441         {
<a name="l00442"></a>00442             <span class="comment">// Hide the main menu bar</span>
<a name="l00443"></a>00443             [NSMenu setMenuBarVisible:NO];
<a name="l00444"></a>00444         }
<a name="l00445"></a>00445         
<a name="l00446"></a>00446         <span class="keywordflow">if</span> (myPrevMode != *fullscreenMode)
<a name="l00447"></a>00447         {
<a name="l00448"></a>00448             <span class="comment">// Switch to the wished display mode</span>
<a name="l00449"></a>00449             CGDisplaySwitchToMode(kCGDirectMainDisplay, displayMode);
<a name="l00450"></a>00450         }
<a name="l00451"></a>00451         
<a name="l00452"></a>00452         <span class="keywordflow">if</span> (myFullscreenWrapper)
<a name="l00453"></a>00453         {
<a name="l00454"></a>00454             [[myFullscreenWrapper window] close];
<a name="l00455"></a>00455         }
<a name="l00456"></a>00456         
<a name="l00457"></a>00457         <span class="comment">// Open and center the window</span>
<a name="l00458"></a>00458         [[aWrapper <a class="code" href="interfaceWindowWrapper.htm#220a751d6f28e154784667bf0b0d75c2" title="Return a reference to the internal Cocoa window.">window</a>] makeKeyAndOrderFront:nil];
<a name="l00459"></a>00459         [[aWrapper <a class="code" href="interfaceWindowWrapper.htm#220a751d6f28e154784667bf0b0d75c2" title="Return a reference to the internal Cocoa window.">window</a>] center];
<a name="l00460"></a>00460         
<a name="l00461"></a>00461 <span class="preprocessor">#if ENABLE_FADE_OPERATIONS</span>
<a name="l00462"></a>00462 <span class="preprocessor"></span>        <span class="comment">// Fade to normal screen</span>
<a name="l00463"></a>00463         [<span class="keyword">self</span> doFadeOperation:CleanScreen time:0.2f sync:false];
<a name="l00464"></a>00464 <span class="preprocessor">#endif</span>
<a name="l00465"></a>00465 <span class="preprocessor"></span>        
<a name="l00466"></a>00466         <span class="comment">// Save the fullscreen wrapper</span>
<a name="l00467"></a>00467         myFullscreenWrapper = aWrapper;
<a name="l00468"></a>00468     }
<a name="l00469"></a>00469     <span class="keywordflow">else</span>
<a name="l00470"></a>00470     {
<a name="l00471"></a>00471         std::cerr &lt;&lt; <span class="stringliteral">"Inconcistency error for arguments given to -[AppController setFullscreenWindow:mode:]"</span> &lt;&lt; std::endl;
<a name="l00472"></a>00472     }
<a name="l00473"></a>00473 }
<a name="l00474"></a>00474 
<a name="l00475"></a>00475 
<a name="l00484"></a>00484 - (void) doFadeOperation:(<span class="keywordtype">int</span>)operation time:(<span class="keywordtype">float</span>)time sync:(<span class="keywordtype">bool</span>)sync
<a name="l00485"></a>00485 {
<a name="l00486"></a>00486     <span class="keyword">static</span> CGDisplayFadeReservationToken prevToken = kCGDisplayFadeReservationInvalidToken;
<a name="l00487"></a>00487     CGDisplayFadeReservationToken token = prevToken;
<a name="l00488"></a>00488     
<a name="l00489"></a>00489     CGError result = 0, capture = 0;
<a name="l00490"></a>00490     
<a name="l00491"></a>00491     <span class="keywordflow">if</span> (operation == FillScreen) {
<a name="l00492"></a>00492         <span class="comment">// Get access for the fade operation</span>
<a name="l00493"></a>00493         result = CGAcquireDisplayFadeReservation((<span class="keywordtype">int</span>)(3 + time), &amp;token);
<a name="l00494"></a>00494         
<a name="l00495"></a>00495         <span class="keywordflow">if</span> (!result) {
<a name="l00496"></a>00496             <span class="comment">// Capture display but do not fill the screen with black</span>
<a name="l00497"></a>00497             <span class="comment">// so that we can see the fade operation</span>
<a name="l00498"></a>00498             capture = CGDisplayCaptureWithOptions(kCGDirectMainDisplay, kCGCaptureNoFill);
<a name="l00499"></a>00499             
<a name="l00500"></a>00500             <span class="keywordflow">if</span> (!capture) {
<a name="l00501"></a>00501                 <span class="comment">// Do the increasing fade operation</span>
<a name="l00502"></a>00502                 CGDisplayFade(token, time,
<a name="l00503"></a>00503                               kCGDisplayBlendNormal,
<a name="l00504"></a>00504                               kCGDisplayBlendSolidColor,
<a name="l00505"></a>00505                               0.0f, 0.0f, 0.0f, sync);
<a name="l00506"></a>00506                 
<a name="l00507"></a>00507                 <span class="comment">// Now, release the non black-filling capture</span>
<a name="l00508"></a>00508                 CGDisplayRelease(kCGDirectMainDisplay);
<a name="l00509"></a>00509                 
<a name="l00510"></a>00510                 <span class="comment">// And capture with filling</span>
<a name="l00511"></a>00511                 <span class="comment">// so that we don't see the switching in the meantime</span>
<a name="l00512"></a>00512                 CGDisplayCaptureWithOptions(kCGDirectMainDisplay, kCGCaptureNoOptions);
<a name="l00513"></a>00513             }
<a name="l00514"></a>00514             
<a name="l00515"></a>00515             prevToken = token;
<a name="l00516"></a>00516         }
<a name="l00517"></a>00517     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (operation == CleanScreen) {
<a name="l00518"></a>00518         <span class="comment">// Get access for the fade operation</span>
<a name="l00519"></a>00519         <span class="keywordflow">if</span> (token == kCGDisplayFadeReservationInvalidToken)
<a name="l00520"></a>00520             result = CGAcquireDisplayFadeReservation((<span class="keywordtype">int</span>)(3 + time), &amp;token);
<a name="l00521"></a>00521         
<a name="l00522"></a>00522         <span class="keywordflow">if</span> (!result) {
<a name="l00523"></a>00523             <span class="keywordflow">if</span> (!capture) {
<a name="l00524"></a>00524                 <span class="comment">// Release the black-filling capture</span>
<a name="l00525"></a>00525                 CGDisplayRelease(kCGDirectMainDisplay);
<a name="l00526"></a>00526                 
<a name="l00527"></a>00527                 <span class="comment">// Capture the display but do not fill with black (still for the fade operation)</span>
<a name="l00528"></a>00528                 CGDisplayCaptureWithOptions(kCGDirectMainDisplay, kCGCaptureNoFill);
<a name="l00529"></a>00529                 
<a name="l00530"></a>00530                 <span class="comment">// Do the decreasing fading</span>
<a name="l00531"></a>00531                 CGDisplayFade(token, time,
<a name="l00532"></a>00532                               kCGDisplayBlendSolidColor,
<a name="l00533"></a>00533                               kCGDisplayBlendNormal,
<a name="l00534"></a>00534                               0.0f, 0.0f, 0.0f, sync);
<a name="l00535"></a>00535                 
<a name="l00536"></a>00536                 <span class="comment">// Release the fade operation token</span>
<a name="l00537"></a>00537                 CGReleaseDisplayFadeReservation(token);
<a name="l00538"></a>00538                 
<a name="l00539"></a>00539                 <span class="comment">// Invalidate the given token</span>
<a name="l00540"></a>00540                 prevToken = kCGDisplayFadeReservationInvalidToken;
<a name="l00541"></a>00541             }
<a name="l00542"></a>00542             
<a name="l00543"></a>00543             <span class="comment">// Release the captured display</span>
<a name="l00544"></a>00544             CGDisplayRelease(kCGDirectMainDisplay);
<a name="l00545"></a>00545         }
<a name="l00546"></a>00546     }
<a name="l00547"></a>00547 }
<a name="l00548"></a>00548 
<a name="l00549"></a>00549 
<a name="l00553"></a>00553 - (const sf::VideoMode&amp;)desktopMode
<a name="l00554"></a>00554 {
<a name="l00555"></a>00555     <span class="keywordflow">return</span> myDesktopMode;
<a name="l00556"></a>00556 }
<a name="l00557"></a>00557 
<a name="l00558"></a>00558 <span class="keyword">@end</span>
<a name="l00559"></a>00559 
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
