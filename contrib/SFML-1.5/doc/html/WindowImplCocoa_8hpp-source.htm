<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>WindowImplCocoa.hpp</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Lucas Soltic (ceylow@gmail.com) and Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00025"></a>00025 <span class="preprocessor">#ifndef SFML_WINDOWIMPLCOCOA_HPP</span>
<a name="l00026"></a>00026 <span class="preprocessor"></span><span class="preprocessor">#define SFML_WINDOWIMPLCOCOA_HPP</span>
<a name="l00027"></a>00027 <span class="preprocessor"></span>
<a name="l00029"></a>00029 <span class="comment">// Headers</span>
<a name="l00031"></a>00031 <span class="comment"></span><span class="preprocessor">#include &lt;SFML/Window/Event.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#include &lt;SFML/Window/WindowImpl.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#include &lt;string&gt;</span>
<a name="l00034"></a>00034 
<a name="l00035"></a>00035 <span class="preprocessor">#ifdef __OBJC__</span>
<a name="l00036"></a>00036 <span class="preprocessor"></span><span class="preprocessor">#import &lt;Cocoa/Cocoa.h&gt;</span>
<a name="l00037"></a>00037 <span class="keyword">@class</span> <a class="code" href="interfaceWindowWrapper.htm" title="WindowWrapper class : handles both imported and self-built windows.">WindowWrapper</a>;
<a name="l00038"></a>00038 <span class="preprocessor">#endif</span>
<a name="l00039"></a>00039 <span class="preprocessor"></span>
<a name="l00040"></a>00040 <span class="keyword">namespace </span>sf
<a name="l00041"></a>00041 {
<a name="l00042"></a>00042 <span class="keyword">namespace </span>priv
<a name="l00043"></a>00043 {
<a name="l00044"></a>00044 
<a name="l00048"></a>00048 <span class="keyword">class </span>WindowImplCocoa : <span class="keyword">public</span> WindowImpl
<a name="l00049"></a>00049 {
<a name="l00050"></a>00050 <span class="keyword">public</span> :
<a name="l00051"></a>00051 
<a name="l00057"></a>00057     WindowImplCocoa();
<a name="l00058"></a>00058 
<a name="l00067"></a>00067     WindowImplCocoa(WindowHandle Handle, WindowSettings&amp; params);
<a name="l00068"></a>00068 
<a name="l00078"></a>00078     WindowImplCocoa(VideoMode Mode, <span class="keyword">const</span> std::string&amp; Title, <span class="keywordtype">unsigned</span> <span class="keywordtype">long</span> WindowStyle, WindowSettings&amp; params);
<a name="l00079"></a>00079 
<a name="l00084"></a>00084     ~WindowImplCocoa();
<a name="l00085"></a>00085 
<a name="l00092"></a>00092     <span class="keyword">static</span> <span class="keywordtype">bool</span> IsContextActive();
<a name="l00093"></a>00093     
<a name="l00097"></a>00097     <span class="keywordtype">void</span> HandleNotifiedEvent(Event&amp; eventRef);
<a name="l00098"></a>00098     
<a name="l00103"></a>00103     <span class="keywordtype">void</span> HandleKeyDown(<span class="keywordtype">void</span> *eventRef);
<a name="l00104"></a>00104     <span class="keywordtype">void</span> HandleKeyUp(<span class="keywordtype">void</span> *eventRef);
<a name="l00105"></a>00105     <span class="keywordtype">void</span> HandleModifierKey(<span class="keywordtype">void</span> *eventRef);
<a name="l00106"></a>00106     <span class="keywordtype">void</span> HandleMouseDown(<span class="keywordtype">void</span> *eventRef);
<a name="l00107"></a>00107     <span class="keywordtype">void</span> HandleMouseUp(<span class="keywordtype">void</span> *eventRef);
<a name="l00108"></a>00108     <span class="keywordtype">void</span> HandleMouseMove(<span class="keywordtype">void</span> *eventRef);
<a name="l00109"></a>00109     <span class="keywordtype">void</span> HandleMouseWheel(<span class="keywordtype">void</span> *eventRef);
<a name="l00110"></a>00110     
<a name="l00111"></a>00111 <span class="keyword">private</span> :
<a name="l00112"></a>00112 
<a name="l00117"></a>00117     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Display();
<a name="l00118"></a>00118 
<a name="l00123"></a>00123     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ProcessEvents();
<a name="l00124"></a>00124     
<a name="l00129"></a>00129     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetActive(<span class="keywordtype">bool</span> Active = <span class="keyword">true</span>) <span class="keyword">const</span>;
<a name="l00130"></a>00130 
<a name="l00135"></a>00135     <span class="keyword">virtual</span> <span class="keywordtype">void</span> UseVerticalSync(<span class="keywordtype">bool</span> Enabled);
<a name="l00136"></a>00136 
<a name="l00141"></a>00141     <span class="keyword">virtual</span> <span class="keywordtype">void</span> ShowMouseCursor(<span class="keywordtype">bool</span> Show);
<a name="l00142"></a>00142 
<a name="l00147"></a>00147     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetCursorPosition(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Left, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Top);
<a name="l00148"></a>00148 
<a name="l00153"></a>00153     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetPosition(<span class="keywordtype">int</span> Left, <span class="keywordtype">int</span> Top);
<a name="l00154"></a>00154     
<a name="l00159"></a>00159     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetSize(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height);
<a name="l00160"></a>00160     
<a name="l00165"></a>00165     <span class="keyword">virtual</span> <span class="keywordtype">void</span> Show(<span class="keywordtype">bool</span> State);
<a name="l00166"></a>00166     
<a name="l00171"></a>00171     <span class="keyword">virtual</span> <span class="keywordtype">void</span> EnableKeyRepeat(<span class="keywordtype">bool</span> Enabled);
<a name="l00172"></a>00172     
<a name="l00177"></a>00177     <span class="keyword">virtual</span> <span class="keywordtype">void</span> SetIcon(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Width, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> Height, <span class="keyword">const</span> Uint8* Pixels);
<a name="l00178"></a>00178     
<a name="l00179"></a>00179     
<a name="l00180"></a>00180     
<a name="l00184"></a>00184     
<a name="l00185"></a>00185     
<a name="l00187"></a>00187     <span class="comment">// Member data</span>
<a name="l00189"></a>00189 <span class="comment"></span>    
<a name="l00190"></a>00190 <span class="preprocessor">#ifdef __OBJC__</span>
<a name="l00191"></a>00191 <span class="preprocessor"></span>    <a class="code" href="interfaceWindowWrapper.htm" title="WindowWrapper class : handles both imported and self-built windows.">WindowWrapper</a> *myWrapper;
<a name="l00192"></a>00192 <span class="preprocessor">#else</span>
<a name="l00193"></a>00193 <span class="preprocessor"></span>    <span class="keywordtype">void</span> *myWrapper;
<a name="l00194"></a>00194 <span class="preprocessor">#endif</span>
<a name="l00195"></a>00195 <span class="preprocessor"></span>    
<a name="l00196"></a>00196     <span class="keywordtype">bool</span> myUseKeyRepeat;
<a name="l00197"></a>00197     <span class="keywordtype">bool</span> myMouseIn;
<a name="l00198"></a>00198     <span class="keywordtype">float</span> myWheelStatus;
<a name="l00199"></a>00199 };
<a name="l00200"></a>00200 
<a name="l00201"></a>00201 } <span class="comment">// namespace priv</span>
<a name="l00202"></a>00202 
<a name="l00203"></a>00203 } <span class="comment">// namespace sf</span>
<a name="l00204"></a>00204 
<a name="l00205"></a>00205 <span class="preprocessor">#endif // SFML_WINDOWIMPLCOCOA_HPP</span>
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
