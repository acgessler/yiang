<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li class="current"><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="files.htm"><span>File&nbsp;List</span></a></li>
    </ul>
  </div>
<h1>GLKit.mm</h1><div class="fragment"><pre class="fragment"><a name="l00001"></a>00001 
<a name="l00002"></a>00002 <span class="comment">//</span>
<a name="l00003"></a>00003 <span class="comment">// SFML - Simple and Fast Multimedia Library</span>
<a name="l00004"></a>00004 <span class="comment">// Copyright (C) 2007-2009 Lucas Soltic (ceylow@gmail.com) and Laurent Gomila (laurent.gom@gmail.com)</span>
<a name="l00005"></a>00005 <span class="comment">//</span>
<a name="l00006"></a>00006 <span class="comment">// This software is provided 'as-is', without any express or implied warranty.</span>
<a name="l00007"></a>00007 <span class="comment">// In no event will the authors be held liable for any damages arising from the use of this software.</span>
<a name="l00008"></a>00008 <span class="comment">//</span>
<a name="l00009"></a>00009 <span class="comment">// Permission is granted to anyone to use this software for any purpose,</span>
<a name="l00010"></a>00010 <span class="comment">// including commercial applications, and to alter it and redistribute it freely,</span>
<a name="l00011"></a>00011 <span class="comment">// subject to the following restrictions:</span>
<a name="l00012"></a>00012 <span class="comment">//</span>
<a name="l00013"></a>00013 <span class="comment">// 1. The origin of this software must not be misrepresented;</span>
<a name="l00014"></a>00014 <span class="comment">//    you must not claim that you wrote the original software.</span>
<a name="l00015"></a>00015 <span class="comment">//    If you use this software in a product, an acknowledgment</span>
<a name="l00016"></a>00016 <span class="comment">//    in the product documentation would be appreciated but is not required.</span>
<a name="l00017"></a>00017 <span class="comment">//</span>
<a name="l00018"></a>00018 <span class="comment">// 2. Altered source versions must be plainly marked as such,</span>
<a name="l00019"></a>00019 <span class="comment">//    and must not be misrepresented as being the original software.</span>
<a name="l00020"></a>00020 <span class="comment">//</span>
<a name="l00021"></a>00021 <span class="comment">// 3. This notice may not be removed or altered from any source distribution.</span>
<a name="l00022"></a>00022 <span class="comment">//</span>
<a name="l00024"></a>00024 <span class="comment"></span>
<a name="l00026"></a>00026 <span class="comment">// Headers</span>
<a name="l00028"></a>00028 <span class="comment"></span><span class="preprocessor">#import &lt;SFML/Window/Cocoa/GLKit.h&gt;</span>
<a name="l00029"></a>00029 <span class="preprocessor">#import &lt;SFML/Window/Cocoa/AppController.h&gt;</span>
<a name="l00030"></a>00030 <span class="preprocessor">#import &lt;SFML/Window/VideoMode.hpp&gt;</span>
<a name="l00031"></a>00031 <span class="preprocessor">#import &lt;SFML/Window/WindowStyle.hpp&gt;</span>
<a name="l00032"></a>00032 <span class="preprocessor">#import &lt;SFML/System/Sleep.hpp&gt;</span>
<a name="l00033"></a>00033 <span class="preprocessor">#import &lt;OpenGL/gl.h&gt;</span>
<a name="l00034"></a>00034 <span class="preprocessor">#import &lt;iostream&gt;</span>
<a name="l00035"></a>00035 
<a name="l00036"></a>00036 
<a name="l00040"></a>00040 <span class="keyword">@implementation </span><a class="code" href="interfaceGLContext.htm" title="Window independant OpenGL context class.">GLContext</a>
<a name="l00041"></a>00041 
<a name="l00042"></a>00042 <span class="keyword">static</span> <a class="code" href="interfaceGLContext.htm" title="Window independant OpenGL context class.">GLContext</a> *sharedCtx = nil;
<a name="l00043"></a>00043 
<a name="l00047"></a><a class="code" href="interfaceGLContext.htm#81de93d8873cb597324c8a45792680bb">00047</a> + (id)<a class="code" href="interfaceGLContext.htm#81de93d8873cb597324c8a45792680bb" title="Return the shared OpenGL context instance (making one if needed).">sharedContext</a>
<a name="l00048"></a>00048 {
<a name="l00049"></a>00049     <span class="keywordflow">if</span> (sharedCtx == nil)
<a name="l00050"></a>00050     {
<a name="l00051"></a>00051         <span class="comment">// Make a new context with the default parameters</span>
<a name="l00052"></a>00052         <a class="code" href="structsf_1_1WindowSettings.htm" title="Structure defining the creation settings of windows.">sf::WindowSettings</a> params(0, 0, 0);
<a name="l00053"></a>00053         sharedCtx = [[<a class="code" href="interfaceGLContext.htm" title="Window independant OpenGL context class.">GLContext</a> alloc] initWithAttributes:params sharedContext:nil];
<a name="l00054"></a>00054     }
<a name="l00055"></a>00055     
<a name="l00056"></a>00056     <span class="keywordflow">return</span> sharedCtx;
<a name="l00057"></a>00057 }
<a name="l00058"></a>00058 
<a name="l00059"></a>00059 - (void)dealloc
<a name="l00060"></a>00060 {
<a name="l00061"></a>00061     [mySharedContext release];
<a name="l00062"></a>00062     [<span class="keyword">super</span> dealloc];
<a name="l00063"></a>00063 }
<a name="l00064"></a>00064 
<a name="l00069"></a><a class="code" href="interfaceGLContext.htm#5dbd49ececc15126160b6fe2975762b1">00069</a> - (id)initWithAttributes:(sf::WindowSettings&amp;)attribs sharedContext:(<a class="code" href="interfaceGLContext.htm" title="Window independant OpenGL context class.">GLContext</a> *)context
<a name="l00070"></a>00070 {
<a name="l00071"></a>00071     <span class="comment">// Note about antialiasing and other context attributes :</span>
<a name="l00072"></a>00072     <span class="comment">// OpenGL context sharing does not allow the shared contexts to use different attributes.</span>
<a name="l00073"></a>00073     <span class="comment">// The point is that the default shared global OpenGL context uses default parameters.</span>
<a name="l00074"></a>00074     <span class="comment">// That means that all the other context *should* use the same paramaters.</span>
<a name="l00075"></a>00075     <span class="comment">// Fortunately some values parameters for some parameters are compatible, but some are not</span>
<a name="l00076"></a>00076     <span class="comment">// among which : the antialising level.</span>
<a name="l00077"></a>00077     <span class="comment">//</span>
<a name="l00078"></a>00078     <span class="comment">// I've no way to fix this for now.</span>
<a name="l00079"></a>00079     
<a name="l00080"></a>00080     <span class="keywordflow">if</span> (attribs.AntialiasingLevel)
<a name="l00081"></a>00081         std::cerr &lt;&lt; <span class="stringliteral">"Warning: antialiasing settings are inhibited under Mac OS X for technical reasons"</span> &lt;&lt; std::endl;
<a name="l00082"></a>00082     
<a name="l00083"></a>00083     NSOpenGLPixelFormat *myPixelFormat = nil;
<a name="l00084"></a>00084     <span class="keywordtype">unsigned</span> idx = 0;
<a name="l00085"></a>00085     
<a name="l00086"></a>00086     <span class="comment">// Attributes list</span>
<a name="l00087"></a>00087     NSOpenGLPixelFormatAttribute ctxtAttribs[15] = {(NSOpenGLPixelFormatAttribute) 0};
<a name="l00088"></a>00088     
<a name="l00089"></a>00089     <span class="comment">// Accelerated, double buffered</span>
<a name="l00090"></a>00090     ctxtAttribs[idx++] = NSOpenGLPFAClosestPolicy;
<a name="l00091"></a>00091     ctxtAttribs[idx++] = NSOpenGLPFADoubleBuffer;
<a name="l00092"></a>00092     ctxtAttribs[idx++] = NSOpenGLPFAAccelerated;
<a name="l00093"></a>00093     
<a name="l00094"></a>00094     <span class="comment">// windowed context (even fullscreen mode uses a window)</span>
<a name="l00095"></a>00095     ctxtAttribs[idx++] = NSOpenGLPFAWindow;
<a name="l00096"></a>00096     
<a name="l00097"></a>00097     <span class="comment">// Color size ; usually 32 bits per pixel</span>
<a name="l00098"></a>00098     ctxtAttribs[idx++] = NSOpenGLPFAColorSize;
<a name="l00099"></a>00099     ctxtAttribs[idx++] = (NSOpenGLPixelFormatAttribute) <a class="code" href="classsf_1_1VideoMode.htm#0b29193258c4855f75337e62f2b56eea" title="Get the current desktop video mode.">sf::VideoMode::GetDesktopMode</a>().BitsPerPixel;
<a name="l00100"></a>00100     
<a name="l00101"></a>00101     <span class="comment">// Z-buffer size</span>
<a name="l00102"></a>00102     ctxtAttribs[idx++] = NSOpenGLPFADepthSize;
<a name="l00103"></a>00103     ctxtAttribs[idx++] = (NSOpenGLPixelFormatAttribute) attribs.DepthBits;
<a name="l00104"></a>00104     
<a name="l00105"></a>00105     <span class="comment">// Stencil bits (I don't really know what's that...)</span>
<a name="l00106"></a>00106     ctxtAttribs[idx++] = NSOpenGLPFAStencilSize;
<a name="l00107"></a>00107     ctxtAttribs[idx++] = (NSOpenGLPixelFormatAttribute) attribs.StencilBits;
<a name="l00108"></a>00108     
<a name="l00109"></a>00109     myPixelFormat = [[NSOpenGLPixelFormat alloc] initWithAttributes:ctxtAttribs];
<a name="l00110"></a>00110     
<a name="l00111"></a>00111     <span class="keywordflow">if</span> (myPixelFormat) {
<a name="l00112"></a>00112         <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFormat:myPixelFormat
<a name="l00113"></a>00113                                     shareContext:context];
<a name="l00114"></a>00114         
<a name="l00115"></a>00115         mySharedContext = [context retain];
<a name="l00116"></a>00116         
<a name="l00117"></a>00117         <span class="comment">// Get the effective properties from our OpenGL context</span>
<a name="l00118"></a>00118         GLint tmpDepthSize = 0, tmpStencilBits = 0, tmpAntialiasingLevel = 0;
<a name="l00119"></a>00119         
<a name="l00120"></a>00120         <span class="keywordflow">if</span> (<span class="keyword">self</span>) {
<a name="l00121"></a>00121             [myPixelFormat getValues:&amp;tmpDepthSize
<a name="l00122"></a>00122                     forAttribute:NSOpenGLPFADepthSize
<a name="l00123"></a>00123                 forVirtualScreen:[<span class="keyword">self</span> currentVirtualScreen]];
<a name="l00124"></a>00124             
<a name="l00125"></a>00125             [myPixelFormat getValues:&amp;tmpStencilBits
<a name="l00126"></a>00126                     forAttribute:NSOpenGLPFAStencilSize
<a name="l00127"></a>00127                 forVirtualScreen:[<span class="keyword">self</span> currentVirtualScreen]];
<a name="l00128"></a>00128             
<a name="l00129"></a>00129             [myPixelFormat getValues:&amp;tmpAntialiasingLevel
<a name="l00130"></a>00130                     forAttribute:NSOpenGLPFASamples
<a name="l00131"></a>00131                 forVirtualScreen:[<span class="keyword">self</span> currentVirtualScreen]];
<a name="l00132"></a>00132         }
<a name="l00133"></a>00133         
<a name="l00134"></a>00134         
<a name="l00135"></a>00135         attribs.DepthBits = (unsigned) tmpDepthSize;
<a name="l00136"></a>00136         attribs.StencilBits = (unsigned) tmpStencilBits;
<a name="l00137"></a>00137         attribs.AntialiasingLevel = (unsigned) tmpAntialiasingLevel;
<a name="l00138"></a>00138         
<a name="l00139"></a>00139         [myPixelFormat release];
<a name="l00140"></a>00140     }
<a name="l00141"></a>00141     
<a name="l00142"></a>00142     <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00143"></a>00143 }
<a name="l00144"></a>00144 
<a name="l00145"></a>00145 <span class="keyword">@end</span>
<a name="l00146"></a>00146 
<a name="l00147"></a>00147 
<a name="l00151"></a>00151 <span class="keyword">@implementation </span><a class="code" href="interfaceGLView.htm" title="Customized Cocoa OpenGL view.">GLView</a>
<a name="l00152"></a>00152 
<a name="l00159"></a><a class="code" href="interfaceGLView.htm#a1f15725cf35f14cba143a38b6a8f68a">00159</a> - (id)initWithFrame:(NSRect)frame
<a name="l00160"></a>00160                mode:(const sf::VideoMode&amp;)mode
<a name="l00161"></a>00161            settings:(sf::WindowSettings&amp;)settings
<a name="l00162"></a>00162            delegate:(sf::priv::WindowImplCocoa *)delegate
<a name="l00163"></a>00163 {
<a name="l00164"></a>00164     assert(delegate != NULL);
<a name="l00165"></a>00165     
<a name="l00166"></a>00166     <span class="comment">// make the view</span>
<a name="l00167"></a>00167     <span class="keyword">self</span> = [<span class="keyword">super</span> initWithFrame:frame pixelFormat:nil];
<a name="l00168"></a>00168     
<a name="l00169"></a>00169     <span class="keywordflow">if</span> (<span class="keyword">self</span>)
<a name="l00170"></a>00170     {
<a name="l00171"></a>00171         <span class="comment">// enabled auto-resizing</span>
<a name="l00172"></a>00172         [<span class="keyword">self</span> setAutoresizingMask:NSViewWidthSizable | NSViewHeightSizable];
<a name="l00173"></a>00173         
<a name="l00174"></a>00174         <span class="comment">// make the OpenGL context</span>
<a name="l00175"></a>00175         myGLContext = [[<a class="code" href="interfaceGLContext.htm" title="Window independant OpenGL context class.">GLContext</a> alloc] initWithAttributes:settings sharedContext:sharedCtx];
<a name="l00176"></a>00176         
<a name="l00177"></a>00177         <span class="comment">// We need to update the OpenGL view when it's resized</span>
<a name="l00178"></a>00178         NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
<a name="l00179"></a>00179         [nc addObserver:self
<a name="l00180"></a>00180                selector:@selector(viewFrameDidChange:)
<a name="l00181"></a>00181                    name:NSViewFrameDidChangeNotification
<a name="l00182"></a>00182                  object:self];
<a name="l00183"></a>00183         
<a name="l00184"></a>00184         <span class="comment">// Save the delegate</span>
<a name="l00185"></a>00185         myDelegate = delegate;
<a name="l00186"></a>00186     }
<a name="l00187"></a>00187     
<a name="l00188"></a>00188     <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00189"></a>00189 }
<a name="l00190"></a>00190 
<a name="l00191"></a>00191 
<a name="l00195"></a>00195 - (void)dealloc
<a name="l00196"></a>00196 {
<a name="l00197"></a>00197     <span class="comment">// Remove the observer and release the OpenGL context</span>
<a name="l00198"></a>00198     [[NSNotificationCenter defaultCenter] removeObserver:self];
<a name="l00199"></a>00199     [myGLContext release];
<a name="l00200"></a>00200     
<a name="l00201"></a>00201     [<span class="keyword">super</span> dealloc];
<a name="l00202"></a>00202 }
<a name="l00203"></a>00203 
<a name="l00204"></a>00204 
<a name="l00208"></a><a class="code" href="interfaceGLView.htm#9f9f4d9af2ad53f19870fb26c11b2b44">00208</a> - (void)<a class="code" href="interfaceGLView.htm#9f9f4d9af2ad53f19870fb26c11b2b44" title="Finish view setting (after having added it to the window).">finishInitialization</a>
<a name="l00209"></a>00209 {
<a name="l00210"></a>00210     assert([<span class="keyword">self</span> superview] != nil);
<a name="l00211"></a>00211     assert(myGLContext != nil);
<a name="l00212"></a>00212     
<a name="l00213"></a>00213     <span class="comment">// Attach the OpenGL context to our view</span>
<a name="l00214"></a>00214     [<span class="keyword">self</span> clearGLContext];
<a name="l00215"></a>00215     [<span class="keyword">self</span> setOpenGLContext:myGLContext];
<a name="l00216"></a>00216     [<a class="code" href="interfaceGLContext.htm" title="Window independant OpenGL context class.">myGLContext</a> setView:self];
<a name="l00217"></a>00217     
<a name="l00218"></a>00218     <span class="comment">// Make our view the first responder</span>
<a name="l00219"></a>00219     [[<span class="keyword">self</span> window] makeFirstResponder:self];
<a name="l00220"></a>00220 }
<a name="l00221"></a>00221 
<a name="l00222"></a>00222 
<a name="l00226"></a><a class="code" href="interfaceGLView.htm#de82215c92c9d11c5f5df136b3622649">00226</a> - (void)enableVerticalSync:(<span class="keywordtype">bool</span>)flag
<a name="l00227"></a>00227 {
<a name="l00228"></a>00228     GLint enable = (flag) ? 1 : 0;
<a name="l00229"></a>00229     [[<span class="keyword">self</span> openGLContext] setValues:&amp;enable forParameter:NSOpenGLCPSwapInterval];
<a name="l00230"></a>00230 }
<a name="l00231"></a>00231 
<a name="l00232"></a>00232 
<a name="l00236"></a><a class="code" href="interfaceGLView.htm#87566de29f9dd0a955a240d10625cb45">00236</a> - (void)setActive:(<span class="keywordtype">bool</span>)flag
<a name="l00237"></a>00237 {
<a name="l00238"></a>00238     <span class="keywordflow">if</span> (flag) {
<a name="l00239"></a>00239         <span class="keywordflow">if</span> ([NSOpenGLContext currentContext] != [<span class="keyword">self</span> openGLContext])
<a name="l00240"></a>00240             [[<span class="keyword">self</span> openGLContext] makeCurrentContext];
<a name="l00241"></a>00241     } <span class="keywordflow">else</span> {
<a name="l00242"></a>00242         <span class="keywordflow">if</span> ([NSOpenGLContext currentContext] == [<span class="keyword">self</span> openGLContext])
<a name="l00243"></a>00243             [NSOpenGLContext clearCurrentContext];
<a name="l00244"></a>00244     }
<a name="l00245"></a>00245 }
<a name="l00246"></a>00246 
<a name="l00247"></a>00247 
<a name="l00251"></a><a class="code" href="interfaceGLView.htm#70d21c97c0bfbcca28ee60b1e85c1704">00251</a> - (void)<a class="code" href="interfaceGLView.htm#70d21c97c0bfbcca28ee60b1e85c1704" title="Forward call to flush the OpenGL context.">flushBuffer</a>
<a name="l00252"></a>00252 {
<a name="l00253"></a>00253     [[<span class="keyword">self</span> openGLContext] flushBuffer];
<a name="l00254"></a>00254 }
<a name="l00255"></a>00255 
<a name="l00256"></a>00256 
<a name="l00260"></a>00260 - (void)pushEvent:(sf::Event)sfEvent
<a name="l00261"></a>00261 {
<a name="l00262"></a>00262     assert(myDelegate != NULL);
<a name="l00263"></a>00263     myDelegate-&gt;HandleNotifiedEvent(sfEvent);
<a name="l00264"></a>00264 }
<a name="l00265"></a>00265 
<a name="l00266"></a>00266 
<a name="l00270"></a>00270 - (void)viewFrameDidChange:(NSNotification *)notification
<a name="l00271"></a>00271 {
<a name="l00272"></a>00272     [<span class="keyword">self</span> update];
<a name="l00273"></a>00273     
<a name="l00274"></a>00274     <a class="code" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">sf::Event</a> ev;
<a name="l00275"></a>00275     ev.<a class="code" href="classsf_1_1Event.htm#90d5da29dd2f49d13dc10e7a402c0b65" title="Type of the event.">Type</a> = sf::Event::Resized;
<a name="l00276"></a>00276     ev.<a class="code" href="classsf_1_1Event.htm#bf98a968c19a31f9719ff40839c28f9e">Size</a>.Width = (unsigned) [<span class="keyword">self</span> frame].size.width;
<a name="l00277"></a>00277     ev.<a class="code" href="classsf_1_1Event.htm#bf98a968c19a31f9719ff40839c28f9e">Size</a>.Height = (<span class="keywordtype">unsigned</span>) [<span class="keyword">self</span> frame].size.height;
<a name="l00278"></a>00278     
<a name="l00279"></a>00279     [<span class="keyword">self</span> pushEvent:ev];
<a name="l00280"></a>00280 }
<a name="l00281"></a>00281 
<a name="l00282"></a>00282 
<a name="l00286"></a>00286 - (void)keyDown:(NSEvent *)theEvent
<a name="l00287"></a>00287 {
<a name="l00288"></a>00288     assert(myDelegate != NULL);
<a name="l00289"></a>00289     
<a name="l00290"></a>00290     NSText *field = [[<span class="keyword">self</span> window] fieldEditor:YES forObject:nil];
<a name="l00291"></a>00291     [field interpretKeyEvents:[NSArray arrayWithObject:theEvent]];
<a name="l00292"></a>00292     [field setString:@""];
<a name="l00293"></a>00293     
<a name="l00294"></a>00294     myDelegate-&gt;HandleKeyDown(theEvent);
<a name="l00295"></a>00295 }
<a name="l00296"></a>00296 
<a name="l00297"></a>00297 
<a name="l00301"></a>00301 - (void)keyUp:(NSEvent *)theEvent
<a name="l00302"></a>00302 {
<a name="l00303"></a>00303     assert(myDelegate != NULL);
<a name="l00304"></a>00304     myDelegate-&gt;HandleKeyUp(theEvent);
<a name="l00305"></a>00305 }
<a name="l00306"></a>00306 
<a name="l00307"></a>00307 
<a name="l00311"></a>00311 - (void)flagsChanged:(NSEvent *)theEvent
<a name="l00312"></a>00312 {
<a name="l00313"></a>00313     assert(myDelegate != NULL);
<a name="l00314"></a>00314     myDelegate-&gt;HandleModifierKey(theEvent);
<a name="l00315"></a>00315 }
<a name="l00316"></a>00316 
<a name="l00317"></a>00317 
<a name="l00321"></a>00321 - (void)scrollWheel:(NSEvent *)theEvent
<a name="l00322"></a>00322 {
<a name="l00323"></a>00323     assert(myDelegate != NULL);
<a name="l00324"></a>00324     myDelegate-&gt;HandleMouseWheel(theEvent);
<a name="l00325"></a>00325 }
<a name="l00326"></a>00326 
<a name="l00327"></a>00327 
<a name="l00331"></a>00331 - (void)mouseDown:(NSEvent *)theEvent
<a name="l00332"></a>00332 {
<a name="l00333"></a>00333     assert(myDelegate != NULL);
<a name="l00334"></a>00334     myDelegate-&gt;HandleMouseDown(theEvent);
<a name="l00335"></a>00335 }
<a name="l00336"></a>00336 
<a name="l00337"></a>00337 
<a name="l00341"></a>00341 - (void)rightMouseDown:(NSEvent *)theEvent
<a name="l00342"></a>00342 {
<a name="l00343"></a>00343     assert(myDelegate != NULL);
<a name="l00344"></a>00344     myDelegate-&gt;HandleMouseDown(theEvent);
<a name="l00345"></a>00345 }
<a name="l00346"></a>00346 
<a name="l00347"></a>00347 
<a name="l00351"></a>00351 - (void)mouseUp:(NSEvent *)theEvent
<a name="l00352"></a>00352 {
<a name="l00353"></a>00353     assert(myDelegate != NULL);
<a name="l00354"></a>00354     myDelegate-&gt;HandleMouseUp(theEvent);
<a name="l00355"></a>00355 }
<a name="l00356"></a>00356 
<a name="l00357"></a>00357 
<a name="l00361"></a>00361 - (void)rightMouseUp:(NSEvent *)theEvent
<a name="l00362"></a>00362 {
<a name="l00363"></a>00363     assert(myDelegate != NULL);
<a name="l00364"></a>00364     myDelegate-&gt;HandleMouseUp(theEvent);
<a name="l00365"></a>00365 }
<a name="l00366"></a>00366 
<a name="l00367"></a>00367 
<a name="l00371"></a>00371 - (void)mouseMoved:(NSEvent *)theEvent
<a name="l00372"></a>00372 {
<a name="l00373"></a>00373     assert(myDelegate != NULL);
<a name="l00374"></a>00374     myDelegate-&gt;HandleMouseMove(theEvent);
<a name="l00375"></a>00375 }
<a name="l00376"></a>00376 
<a name="l00380"></a>00380 - (void)mouseDragged:(NSEvent *)theEvent
<a name="l00381"></a>00381 {
<a name="l00382"></a>00382     assert(myDelegate != NULL);
<a name="l00383"></a>00383     myDelegate-&gt;HandleMouseMove(theEvent);
<a name="l00384"></a>00384 }
<a name="l00385"></a>00385 
<a name="l00389"></a>00389 - (void)rightMouseDragged:(NSEvent *)theEvent
<a name="l00390"></a>00390 {
<a name="l00391"></a>00391     assert(myDelegate != NULL);
<a name="l00392"></a>00392     myDelegate-&gt;HandleMouseMove(theEvent);
<a name="l00393"></a>00393 }
<a name="l00394"></a>00394 
<a name="l00395"></a>00395 
<a name="l00399"></a>00399 - (BOOL)acceptsFirstResponder
<a name="l00400"></a>00400 {
<a name="l00401"></a>00401     <span class="keywordflow">return</span> YES;
<a name="l00402"></a>00402 }
<a name="l00403"></a>00403 
<a name="l00404"></a>00404 
<a name="l00408"></a>00408 - (BOOL)canBecomeKeyView
<a name="l00409"></a>00409 {
<a name="l00410"></a>00410     <span class="keywordflow">return</span> YES;
<a name="l00411"></a>00411 }
<a name="l00412"></a>00412 
<a name="l00413"></a>00413 <span class="keyword">@end</span>
<a name="l00414"></a>00414 
<a name="l00415"></a>00415 
<a name="l00420"></a>00420 <span class="keyword">@implementation </span><a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">GLWindow</a>
<a name="l00421"></a>00421 
<a name="l00422"></a>00422 - (BOOL)canBecomeKeyWindow
<a name="l00423"></a>00423 {
<a name="l00424"></a>00424     <span class="keywordflow">return</span> YES;
<a name="l00425"></a>00425 }
<a name="l00426"></a>00426 
<a name="l00427"></a>00427 - (BOOL)canBecomeMainWindow
<a name="l00428"></a>00428 {
<a name="l00429"></a>00429     <span class="keywordflow">return</span> YES;
<a name="l00430"></a>00430 }
<a name="l00431"></a>00431 
<a name="l00432"></a>00432 <span class="keyword">@end</span>
<a name="l00433"></a>00433 
<a name="l00434"></a>00434 
<a name="l00438"></a>00438 <span class="keyword">@implementation </span><a class="code" href="interfaceWindowWrapper.htm" title="WindowWrapper class : handles both imported and self-built windows.">WindowWrapper</a>
<a name="l00439"></a>00439 
<a name="l00445"></a><a class="code" href="interfaceWindowWrapper.htm#f22be7e975323c6bd6f17508a46ec335">00445</a> - (id)initWithSettings:(sf::WindowSettings&amp;)params
<a name="l00446"></a>00446              videoMode:(sf::VideoMode&amp;)mode
<a name="l00447"></a>00447                  style:(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)style
<a name="l00448"></a>00448                  title:(NSString *)title
<a name="l00449"></a>00449               delegate:(sf::priv::WindowImplCocoa *)delegate
<a name="l00450"></a>00450 {
<a name="l00451"></a>00451     <span class="keywordflow">return</span> [<span class="keyword">self</span> <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">initWithWindow</a>:nil
<a name="l00452"></a>00452                        <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">settings</a>:params
<a name="l00453"></a>00453                       <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">videoMode</a>:mode
<a name="l00454"></a>00454                           <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">style</a>:style
<a name="l00455"></a>00455                           <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">title</a>:title
<a name="l00456"></a>00456                        <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">delegate</a>:delegate];
<a name="l00457"></a>00457 }
<a name="l00458"></a>00458 
<a name="l00459"></a>00459 
<a name="l00466"></a><a class="code" href="interfaceWindowWrapper.htm#16a188d9f72e104f42847576b5d4e6c4">00466</a> - (id)initWithWindow:(NSWindow *)window
<a name="l00467"></a>00467             settings:(sf::WindowSettings&amp;)params
<a name="l00468"></a>00468             delegate:(sf::priv::WindowImplCocoa *)delegate
<a name="l00469"></a>00469 {
<a name="l00470"></a>00470     <a class="code" href="classsf_1_1VideoMode.htm" title="VideoMode defines a video mode (width, height, bpp, frequency) and provides static...">sf::VideoMode</a> mode([[myWindow contentView] frame].size.width, [[myWindow contentView] frame].size.height);
<a name="l00471"></a>00471     <span class="keywordflow">return</span> [<span class="keyword">self</span> <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">initWithWindow</a>:window
<a name="l00472"></a>00472                        <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">settings</a>:params
<a name="l00473"></a>00473                       <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">videoMode</a>:mode
<a name="l00474"></a>00474                           <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">style</a>:0
<a name="l00475"></a>00475                           <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">title</a>:nil
<a name="l00476"></a>00476                        <a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5" title="Make a new window wrapper by importing  if it&amp;#39;s not null and according to the...">delegate</a>:delegate];
<a name="l00477"></a>00477 }
<a name="l00478"></a>00478 
<a name="l00479"></a>00479 
<a name="l00487"></a><a class="code" href="interfaceWindowWrapper.htm#3e51f55f41fb1cb215f4131c27e546c5">00487</a> - (id)initWithWindow:(NSWindow *)window
<a name="l00488"></a>00488             settings:(sf::WindowSettings&amp;)params
<a name="l00489"></a>00489            videoMode:(sf::VideoMode&amp;)mode
<a name="l00490"></a>00490                style:(<span class="keywordtype">unsigned</span> <span class="keywordtype">long</span>)style
<a name="l00491"></a>00491                title:(NSString *)title
<a name="l00492"></a>00492             delegate:(sf::priv::WindowImplCocoa *)delegate
<a name="l00493"></a>00493 {
<a name="l00494"></a>00494     assert(delegate != NULL);
<a name="l00495"></a>00495     
<a name="l00496"></a>00496     <span class="keyword">self</span> = [<span class="keyword">super</span> init];
<a name="l00497"></a>00497     
<a name="l00498"></a>00498     <span class="keywordflow">if</span> (<span class="keyword">self</span>)
<a name="l00499"></a>00499     {
<a name="l00500"></a>00500         <span class="keywordflow">if</span> (<a class="code" href="interfaceWindowWrapper.htm#220a751d6f28e154784667bf0b0d75c2" title="Return a reference to the internal Cocoa window.">window</a>) {
<a name="l00501"></a>00501             myWindow = (<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">GLWindow</a> *)[<a class="code" href="interfaceWindowWrapper.htm#220a751d6f28e154784667bf0b0d75c2" title="Return a reference to the internal Cocoa window.">window</a> retain];
<a name="l00502"></a>00502         } <span class="keywordflow">else</span> {
<a name="l00503"></a>00503             assert(title != nil);
<a name="l00504"></a>00504             
<a name="l00505"></a>00505             NSRect frame = NSMakeRect (0.0f, 0.0f, (<span class="keywordtype">float</span>) mode.<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a>, (<span class="keywordtype">float</span>) mode.<a class="code" href="classsf_1_1VideoMode.htm#c890fbaecc5d9b82b44123a0d5b3c0f5" title="Video mode height, in pixels.">Height</a>);
<a name="l00506"></a>00506             <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> mask = 0;
<a name="l00507"></a>00507             
<a name="l00508"></a>00508             <span class="keywordflow">if</span> (style &amp; <a class="code" href="namespacesf_1_1Style.htm#409b03c32632cf640b869c2da8775f046288ec86830245cf957e2d234f79f50d" title="Fullscreen mode (this flag and all others are mutually exclusive).">sf::Style::Fullscreen</a>) {
<a name="l00509"></a>00509                 myIsFullscreen = <span class="keyword">true</span>;
<a name="l00510"></a>00510                 
<a name="l00511"></a>00511                 <span class="comment">// Check display mode and put new values in 'mode' if needed</span>
<a name="l00512"></a>00512                 boolean_t exact = <span class="keyword">true</span>;
<a name="l00513"></a>00513                 
<a name="l00514"></a>00514                 CFDictionaryRef properties = CGDisplayBestModeForParameters(kCGDirectMainDisplay, mode.<a class="code" href="classsf_1_1VideoMode.htm#c2aa4a809527fd9da6b70c9479d02c7a" title="Video mode pixel depth, in bits per pixels.">BitsPerPixel</a>,
<a name="l00515"></a>00515                                                                             mode.<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a>, mode.<a class="code" href="classsf_1_1VideoMode.htm#c890fbaecc5d9b82b44123a0d5b3c0f5" title="Video mode height, in pixels.">Height</a>, &amp;exact);
<a name="l00516"></a>00516                 
<a name="l00517"></a>00517                 <span class="keywordflow">if</span> (!properties) {
<a name="l00518"></a>00518                     std::cerr &lt;&lt; <span class="stringliteral">"Unable to get a display mode with the given parameters"</span> &lt;&lt; std::endl;
<a name="l00519"></a>00519                     [<span class="keyword">self</span> autorelease];
<a name="l00520"></a>00520                     <span class="keywordflow">return</span> nil;
<a name="l00521"></a>00521                 }
<a name="l00522"></a>00522                 
<a name="l00523"></a>00523                 <span class="keywordflow">if</span> (exact == <span class="keyword">false</span>) {
<a name="l00524"></a>00524                     CFNumberGetValue((CFNumberRef) CFDictionaryGetValue(properties, kCGDisplayWidth),
<a name="l00525"></a>00525                                      kCFNumberIntType, &amp;mode.<a class="code" href="classsf_1_1VideoMode.htm#bee130381af7a465b29ea5cdb3927203" title="Video mode width, in pixels.">Width</a>);
<a name="l00526"></a>00526                     
<a name="l00527"></a>00527                     CFNumberGetValue((CFNumberRef) CFDictionaryGetValue(properties, kCGDisplayHeight),
<a name="l00528"></a>00528                                      kCFNumberIntType, &amp;mode.<a class="code" href="classsf_1_1VideoMode.htm#c890fbaecc5d9b82b44123a0d5b3c0f5" title="Video mode height, in pixels.">Height</a>);
<a name="l00529"></a>00529                     
<a name="l00530"></a>00530                     CFNumberGetValue((CFNumberRef) CFDictionaryGetValue(properties, kCGDisplayBitsPerPixel),
<a name="l00531"></a>00531                                      kCFNumberIntType, &amp;mode.<a class="code" href="classsf_1_1VideoMode.htm#c2aa4a809527fd9da6b70c9479d02c7a" title="Video mode pixel depth, in bits per pixels.">BitsPerPixel</a>);
<a name="l00532"></a>00532                     
<a name="l00533"></a>00533                 }
<a name="l00534"></a>00534             }
<a name="l00535"></a>00535             
<a name="l00536"></a>00536             <span class="comment">// We grab options from WindowStyle and add them to our window mask</span>
<a name="l00537"></a>00537             <span class="keywordflow">if</span> (style &amp; <a class="code" href="namespacesf_1_1Style.htm#409b03c32632cf640b869c2da8775f048c35a9c8507559e455387fc4a83ce422" title="No border / title bar (this flag and all others are mutually exclusive).">sf::Style::None</a> || style &amp; sf::Style::Fullscreen) {
<a name="l00538"></a>00538                 mask |= NSBorderlessWindowMask;
<a name="l00539"></a>00539                 
<a name="l00540"></a>00540                 
<a name="l00541"></a>00541                 
<a name="l00542"></a>00542             } <span class="keywordflow">else</span> {
<a name="l00543"></a>00543                 <span class="keywordflow">if</span> (style &amp; <a class="code" href="namespacesf_1_1Style.htm#409b03c32632cf640b869c2da8775f04b4c8b32b05ed715928513787cb1e85b6" title="Title bar + fixed border.">sf::Style::Titlebar</a>) {
<a name="l00544"></a>00544                     mask |= NSTitledWindowMask;
<a name="l00545"></a>00545                     mask |= NSMiniaturizableWindowMask;
<a name="l00546"></a>00546                 }
<a name="l00547"></a>00547                 
<a name="l00548"></a>00548                 <span class="keywordflow">if</span> (style &amp; <a class="code" href="namespacesf_1_1Style.htm#409b03c32632cf640b869c2da8775f04ccff967648ebcd5db2007eff7352b50f" title="Titlebar + resizable border + maximize button.">sf::Style::Resize</a>) {
<a name="l00549"></a>00549                     mask |= NSTitledWindowMask;
<a name="l00550"></a>00550                     mask |= NSMiniaturizableWindowMask;
<a name="l00551"></a>00551                     mask |= NSResizableWindowMask;
<a name="l00552"></a>00552                 }
<a name="l00553"></a>00553                 
<a name="l00554"></a>00554                 <span class="keywordflow">if</span> (style &amp; <a class="code" href="namespacesf_1_1Style.htm#409b03c32632cf640b869c2da8775f04e07a7d411d5acf28f4a9a4b76a3a9493" title="Titlebar + close button.">sf::Style::Close</a>) {
<a name="l00555"></a>00555                     mask |= NSTitledWindowMask;
<a name="l00556"></a>00556                     mask |= NSClosableWindowMask;
<a name="l00557"></a>00557                     mask |= NSMiniaturizableWindowMask;
<a name="l00558"></a>00558                 }
<a name="l00559"></a>00559             }
<a name="l00560"></a>00560             
<a name="l00561"></a>00561             <span class="comment">// Now we make the window with the values we got</span>
<a name="l00562"></a>00562             <span class="comment">// Note: defer flag set to NO to be able to use OpenGL in our window</span>
<a name="l00563"></a>00563             myWindow = [[<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">GLWindow</a> alloc] initWithContentRect:frame
<a name="l00564"></a>00564                                                    styleMask:mask
<a name="l00565"></a>00565                                                      backing:NSBackingStoreBuffered
<a name="l00566"></a>00566                                                        defer:NO];
<a name="l00567"></a>00567             
<a name="l00568"></a>00568             <span class="keywordflow">if</span> (myWindow) {
<a name="l00569"></a>00569                 <span class="comment">// We set title and window position</span>
<a name="l00570"></a>00570                 [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> setTitle:title];
<a name="l00571"></a>00571                 [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> center];
<a name="l00572"></a>00572             } <span class="keywordflow">else</span> {
<a name="l00573"></a>00573                 std::cerr &lt;&lt; <span class="stringliteral">"Unable to create the Cocoa window"</span> &lt;&lt; std::endl;
<a name="l00574"></a>00574                 [<span class="keyword">self</span> autorelease];
<a name="l00575"></a>00575                 <span class="keywordflow">return</span> nil;
<a name="l00576"></a>00576             }
<a name="l00577"></a>00577         }
<a name="l00578"></a>00578         
<a name="l00579"></a>00579         <span class="comment">// Make the OpenGL view</span>
<a name="l00580"></a>00580         myView = [[<a class="code" href="interfaceGLView.htm" title="Customized Cocoa OpenGL view.">GLView</a> alloc] initWithFrame:[[<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> contentView] frame]
<a name="l00581"></a>00581                                           mode:mode
<a name="l00582"></a>00582                                       settings:params
<a name="l00583"></a>00583                                       delegate:delegate];
<a name="l00584"></a>00584         
<a name="l00585"></a>00585         <span class="keywordflow">if</span> (myView) {
<a name="l00586"></a>00586             <span class="comment">// Finish setting up the view and window</span>
<a name="l00587"></a>00587             <span class="comment">// Add the view to our window and tell it to the view</span>
<a name="l00588"></a>00588             [[<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> contentView] addSubview:myView];
<a name="l00589"></a>00589             [<a class="code" href="interfaceGLView.htm" title="Customized Cocoa OpenGL view.">myView</a> <a class="code" href="interfaceGLView.htm#9f9f4d9af2ad53f19870fb26c11b2b44" title="Finish view setting (after having added it to the window).">finishInitialization</a>];
<a name="l00590"></a>00590             
<a name="l00591"></a>00591             NSNotificationCenter *nc = [NSNotificationCenter defaultCenter];
<a name="l00592"></a>00592             
<a name="l00593"></a>00593             <span class="comment">// We want to know when our window got the focus</span>
<a name="l00594"></a>00594             [nc addObserver:self
<a name="l00595"></a>00595                    selector:@selector(windowDidBecomeMain:)
<a name="l00596"></a>00596                        name:NSWindowDidBecomeMainNotification
<a name="l00597"></a>00597                      object:myWindow];
<a name="l00598"></a>00598             
<a name="l00599"></a>00599             <span class="comment">// We want to know when our window lost the focus</span>
<a name="l00600"></a>00600             [nc addObserver:self
<a name="l00601"></a>00601                    selector:@selector(windowDidResignMain:)
<a name="l00602"></a>00602                        name:NSWindowDidResignMainNotification
<a name="l00603"></a>00603                      object:myWindow];
<a name="l00604"></a>00604             
<a name="l00605"></a>00605             <span class="comment">// We want to know when the user closes the window</span>
<a name="l00606"></a>00606             [nc addObserver:self
<a name="l00607"></a>00607                    selector:@selector(windowWillClose:)
<a name="l00608"></a>00608                        name:NSWindowWillCloseNotification
<a name="l00609"></a>00609                      object:myWindow];
<a name="l00610"></a>00610             
<a name="l00611"></a>00611             <span class="comment">// I want to re-center the window if it's a full screen one and moved by Spaces</span>
<a name="l00612"></a>00612             [nc addObserver:self
<a name="l00613"></a>00613                    selector:@selector(windowDidMove:)
<a name="l00614"></a>00614                        name:NSWindowDidMoveNotification
<a name="l00615"></a>00615                      object:myWindow];
<a name="l00616"></a>00616             
<a name="l00617"></a>00617             <span class="comment">// Needed not to make application crash when releasing the window in our destructor</span>
<a name="l00618"></a>00618             <span class="comment">// (I prefer to take control of everything :P)</span>
<a name="l00619"></a>00619             [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> setReleasedWhenClosed:NO];
<a name="l00620"></a>00620             [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> setAcceptsMouseMovedEvents:YES];
<a name="l00621"></a>00621             
<a name="l00622"></a>00622         } <span class="keywordflow">else</span> {
<a name="l00623"></a>00623             std::cerr &lt;&lt; <span class="stringliteral">"Unable to create the OpenGL view"</span> &lt;&lt; std::endl;
<a name="l00624"></a>00624             [<span class="keyword">self</span> autorelease];
<a name="l00625"></a>00625             <span class="keywordflow">return</span> nil;
<a name="l00626"></a>00626         }
<a name="l00627"></a>00627         
<a name="l00628"></a>00628         <span class="keywordflow">if</span> (myIsFullscreen) {
<a name="l00629"></a>00629             myFullscreenMode = mode;
<a name="l00630"></a>00630             
<a name="l00631"></a>00631             <span class="comment">// Using this because full screen window was not always</span>
<a name="l00632"></a>00632             <span class="comment">// in front of the other application windows when unhiding app</span>
<a name="l00633"></a>00633             [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> setLevel:NSFloatingWindowLevel];
<a name="l00634"></a>00634         }
<a name="l00635"></a>00635     }
<a name="l00636"></a>00636     
<a name="l00637"></a>00637     <span class="keywordflow">return</span> <span class="keyword">self</span>;
<a name="l00638"></a>00638 }
<a name="l00639"></a>00639 
<a name="l00640"></a>00640 
<a name="l00644"></a>00644 - (void)dealloc
<a name="l00645"></a>00645 {
<a name="l00646"></a>00646     
<a name="l00647"></a>00647     <span class="comment">// Remove the notification observer</span>
<a name="l00648"></a>00648     [[NSNotificationCenter defaultCenter] removeObserver:self];
<a name="l00649"></a>00649     
<a name="l00650"></a>00650     <span class="comment">// Close the window</span>
<a name="l00651"></a>00651     [<span class="keyword">self</span> show:false];
<a name="l00652"></a>00652     
<a name="l00653"></a>00653     <span class="comment">// Release the window and view</span>
<a name="l00654"></a>00654     [myView release];
<a name="l00655"></a>00655     [myWindow release];
<a name="l00656"></a>00656     
<a name="l00657"></a>00657     [<span class="keyword">super</span> dealloc];
<a name="l00658"></a>00658 }
<a name="l00659"></a>00659 
<a name="l00660"></a>00660 
<a name="l00664"></a><a class="code" href="interfaceWindowWrapper.htm#220a751d6f28e154784667bf0b0d75c2">00664</a> - (NSWindow *)<a class="code" href="interfaceWindowWrapper.htm#220a751d6f28e154784667bf0b0d75c2" title="Return a reference to the internal Cocoa window.">window</a>
<a name="l00665"></a>00665 {
<a name="l00666"></a>00666     <span class="keywordflow">return</span> myWindow;
<a name="l00667"></a>00667 }
<a name="l00668"></a>00668 
<a name="l00669"></a>00669 
<a name="l00673"></a><a class="code" href="interfaceWindowWrapper.htm#0d469037a9b76a5bacb60ddac7e0b84b">00673</a> - (<a class="code" href="interfaceGLView.htm" title="Customized Cocoa OpenGL view.">GLView</a> *)<a class="code" href="interfaceWindowWrapper.htm#0d469037a9b76a5bacb60ddac7e0b84b" title="Return a reference to the internal Cocoa OpenGL view.">glView</a>
<a name="l00674"></a>00674 {
<a name="l00675"></a>00675     <span class="keywordflow">return</span> myView;
<a name="l00676"></a>00676 }
<a name="l00677"></a>00677 
<a name="l00678"></a>00678 
<a name="l00682"></a><a class="code" href="interfaceWindowWrapper.htm#e0d490eb68593290a188195ab713e230">00682</a> - (void)setPosition:(NSPoint)pos
<a name="l00683"></a>00683 {
<a name="l00684"></a>00684     assert(myWindow != nil);
<a name="l00685"></a>00685     
<a name="l00686"></a>00686     <span class="keywordflow">if</span> (!myIsFullscreen) {
<a name="l00687"></a>00687         <span class="comment">// Flip Y and set window position</span>
<a name="l00688"></a>00688         pos.y = [[<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> screen] frame].size.height - pos.y;
<a name="l00689"></a>00689         [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> setFrameTopLeftPoint:pos];
<a name="l00690"></a>00690     }
<a name="l00691"></a>00691 }
<a name="l00692"></a>00692 
<a name="l00693"></a>00693 
<a name="l00697"></a><a class="code" href="interfaceWindowWrapper.htm#f0748c0976f814e0891fd52eb1f641e4">00697</a> - (void)setSize:(NSSize)size
<a name="l00698"></a>00698 {
<a name="l00699"></a>00699     assert(myWindow != nil);
<a name="l00700"></a>00700     
<a name="l00701"></a>00701     <span class="keywordflow">if</span> (!myIsFullscreen) {
<a name="l00702"></a>00702         [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> setFrame:NSMakeRect([<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> frame].origin.x,
<a name="l00703"></a>00703                                       [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> frame].origin.y,
<a name="l00704"></a>00704                                       size.width, size.height)
<a name="l00705"></a>00705                    display:YES];
<a name="l00706"></a>00706     }
<a name="l00707"></a>00707 }
<a name="l00708"></a>00708 
<a name="l00709"></a>00709 
<a name="l00713"></a><a class="code" href="interfaceWindowWrapper.htm#1d42a80d67788f419e84a243128b56b7">00713</a> - (NSPoint)<a class="code" href="interfaceWindowWrapper.htm#1d42a80d67788f419e84a243128b56b7" title="Return the mouse location relative to the internal window.">mouseLocation</a>
<a name="l00714"></a>00714 {
<a name="l00715"></a>00715     assert(myWindow != nil);
<a name="l00716"></a>00716     
<a name="l00717"></a>00717     NSPoint relativeLocation = [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> convertScreenToBase:[NSEvent mouseLocation]];
<a name="l00718"></a>00718     relativeLocation.y = [[<span class="keyword">self</span> <a class="code" href="interfaceWindowWrapper.htm#0d469037a9b76a5bacb60ddac7e0b84b" title="Return a reference to the internal Cocoa OpenGL view.">glView</a>] frame].size.height - relativeLocation.y;
<a name="l00719"></a>00719     <span class="keywordflow">return</span> relativeLocation;
<a name="l00720"></a>00720 }
<a name="l00721"></a>00721 
<a name="l00722"></a>00722 
<a name="l00726"></a><a class="code" href="interfaceWindowWrapper.htm#d7e57f85ddd9cabcfd83b6b3e4126f5b">00726</a> - (BOOL)<a class="code" href="interfaceWindowWrapper.htm#d7e57f85ddd9cabcfd83b6b3e4126f5b" title="Return whether the mouse is on our window.">mouseInside</a>
<a name="l00727"></a>00727 {
<a name="l00728"></a>00728     assert(myWindow != nil);
<a name="l00729"></a>00729     assert(myView != nil);
<a name="l00730"></a>00730     
<a name="l00731"></a>00731     BOOL flag = NO;
<a name="l00732"></a>00732     
<a name="l00733"></a>00733     <span class="keywordflow">if</span> ([myWindow isVisible]) {
<a name="l00734"></a>00734         NSPoint relativeToWindow = [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> mouseLocationOutsideOfEventStream];
<a name="l00735"></a>00735         NSPoint relativeToView = [<a class="code" href="interfaceGLView.htm" title="Customized Cocoa OpenGL view.">myView</a> convertPoint:relativeToWindow fromView:nil];
<a name="l00736"></a>00736         
<a name="l00737"></a>00737         <span class="keywordflow">if</span> (NSPointInRect (relativeToView, [myView bounds]))
<a name="l00738"></a>00738         {
<a name="l00739"></a>00739             flag = YES;
<a name="l00740"></a>00740         }
<a name="l00741"></a>00741     }
<a name="l00742"></a>00742     
<a name="l00743"></a>00743     <span class="keywordflow">return</span> flag;
<a name="l00744"></a>00744 }
<a name="l00745"></a>00745 
<a name="l00746"></a>00746 
<a name="l00750"></a><a class="code" href="interfaceWindowWrapper.htm#2f0777388a4da1415aac51879ab05597">00750</a> - (void)show:(<span class="keywordtype">bool</span>)flag
<a name="l00751"></a>00751 {
<a name="l00752"></a>00752     assert(myWindow != nil);
<a name="l00753"></a>00753     
<a name="l00754"></a>00754     <span class="keywordflow">if</span> (flag &amp;&amp; ![myWindow isVisible]) {
<a name="l00755"></a>00755         <span class="comment">// Wanna open the closed window</span>
<a name="l00756"></a>00756         
<a name="l00757"></a>00757         <span class="keywordflow">if</span> (myIsFullscreen) {
<a name="l00758"></a>00758             [SharedAppController setFullscreenWindow:self mode:&amp;myFullscreenMode];
<a name="l00759"></a>00759         } <span class="keywordflow">else</span> {
<a name="l00760"></a>00760             <span class="comment">// Show the window</span>
<a name="l00761"></a>00761             [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> makeKeyAndOrderFront:nil];
<a name="l00762"></a>00762         }
<a name="l00763"></a>00763     } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (!flag &amp;&amp; [myWindow isVisible]) {
<a name="l00764"></a>00764         <span class="comment">// Wanna close the opened window</span>
<a name="l00765"></a>00765         
<a name="l00766"></a>00766         <span class="keywordflow">if</span> (myIsFullscreen) {
<a name="l00767"></a>00767             [SharedAppController setFullscreenWindow:nil mode:NULL];
<a name="l00768"></a>00768         } <span class="keywordflow">else</span> {
<a name="l00769"></a>00769             <span class="comment">// Close the window</span>
<a name="l00770"></a>00770             [<a class="code" href="interfaceGLWindow.htm" title="Cocoa window implementation to let fullscreen windows catch key events.">myWindow</a> close];
<a name="l00771"></a>00771         }
<a name="l00772"></a>00772     }   
<a name="l00773"></a>00773 }
<a name="l00774"></a>00774 
<a name="l00775"></a>00775 
<a name="l00779"></a><a class="code" href="interfaceWindowWrapper.htm#4995cfd86e5eab2cfed22696940bd331">00779</a> - (void)enableVerticalSync:(<span class="keywordtype">bool</span>)flag
<a name="l00780"></a>00780 {
<a name="l00781"></a>00781     assert(myView != nil);
<a name="l00782"></a>00782     [<a class="code" href="interfaceGLView.htm" title="Customized Cocoa OpenGL view.">myView</a> <a class="code" href="interfaceGLView.htm#de82215c92c9d11c5f5df136b3622649" title="Forward call to en/disable vertical synchronization.">enableVerticalSync</a>:flag];
<a name="l00783"></a>00783 }
<a name="l00784"></a>00784 
<a name="l00785"></a>00785 
<a name="l00789"></a><a class="code" href="interfaceWindowWrapper.htm#b8dd2a8037d3ad624e165fb46cd3ee76">00789</a> - (void)setActive:(<span class="keywordtype">bool</span>)flag
<a name="l00790"></a>00790 {
<a name="l00791"></a>00791     assert(myView != nil);
<a name="l00792"></a>00792     [<a class="code" href="interfaceGLView.htm" title="Customized Cocoa OpenGL view.">myView</a> <a class="code" href="interfaceGLView.htm#87566de29f9dd0a955a240d10625cb45" title="Forward call to set the OpenGL context as active according to .">setActive</a>:flag];
<a name="l00793"></a>00793 }
<a name="l00794"></a>00794 
<a name="l00795"></a>00795 
<a name="l00799"></a><a class="code" href="interfaceWindowWrapper.htm#992761df449913495c29f6160338cf62">00799</a> - (void)<a class="code" href="interfaceWindowWrapper.htm#992761df449913495c29f6160338cf62" title="Forward call to flush the OpenGL view.">flushBuffer</a>
<a name="l00800"></a>00800 {
<a name="l00801"></a>00801     assert(myView != nil);
<a name="l00802"></a>00802     [<a class="code" href="interfaceGLView.htm" title="Customized Cocoa OpenGL view.">myView</a> <a class="code" href="interfaceGLView.htm#70d21c97c0bfbcca28ee60b1e85c1704" title="Forward call to flush the OpenGL context.">flushBuffer</a>];
<a name="l00803"></a>00803 }
<a name="l00804"></a>00804 
<a name="l00805"></a>00805 
<a name="l00809"></a>00809 - (void)windowDidBecomeMain:(NSNotification *)notification
<a name="l00810"></a>00810 {
<a name="l00811"></a>00811     <a class="code" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">sf::Event</a> ev;
<a name="l00812"></a>00812     ev.<a class="code" href="classsf_1_1Event.htm#90d5da29dd2f49d13dc10e7a402c0b65" title="Type of the event.">Type</a> = sf::Event::GainedFocus;
<a name="l00813"></a>00813     
<a name="l00814"></a>00814     [myView pushEvent:ev];
<a name="l00815"></a>00815 }
<a name="l00816"></a>00816 
<a name="l00817"></a>00817 
<a name="l00821"></a>00821 - (void)windowDidResignMain:(NSNotification *)notification
<a name="l00822"></a>00822 {
<a name="l00823"></a>00823     <a class="code" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">sf::Event</a> ev;
<a name="l00824"></a>00824     ev.<a class="code" href="classsf_1_1Event.htm#90d5da29dd2f49d13dc10e7a402c0b65" title="Type of the event.">Type</a> = sf::Event::LostFocus;
<a name="l00825"></a>00825     
<a name="l00826"></a>00826     [myView pushEvent:ev];
<a name="l00827"></a>00827 }
<a name="l00828"></a>00828 
<a name="l00829"></a>00829 
<a name="l00833"></a>00833 - (void)windowWillClose:(NSNotification *)notification
<a name="l00834"></a>00834 {
<a name="l00835"></a>00835     <a class="code" href="classsf_1_1Event.htm" title="Event defines a system event and its parameters.">sf::Event</a> ev;
<a name="l00836"></a>00836     ev.<a class="code" href="classsf_1_1Event.htm#90d5da29dd2f49d13dc10e7a402c0b65" title="Type of the event.">Type</a> = sf::Event::Closed;
<a name="l00837"></a>00837     
<a name="l00838"></a>00838     [myView pushEvent:ev];
<a name="l00839"></a>00839 }
<a name="l00840"></a>00840 
<a name="l00841"></a>00841 
<a name="l00845"></a>00845 - (void)windowDidMove:(NSNotification *)notification
<a name="l00846"></a>00846 {
<a name="l00847"></a>00847     NSWindow *sender = [notification object];
<a name="l00848"></a>00848     
<a name="l00849"></a>00849     <span class="keywordflow">if</span> (!([sender styleMask] &amp; NSTitledWindowMask))
<a name="l00850"></a>00850         [sender center];
<a name="l00851"></a>00851 }
<a name="l00852"></a>00852 
<a name="l00853"></a>00853 <span class="keyword">@end</span>
<a name="l00854"></a>00854 
</pre></div></div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
