<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<html>
    <head>
        <title>SFML - Simple and Fast Multimedia Library</title>
        <meta http-equiv="Content-Type" content="text/html;charset=UTF-8" />
        <link href="doxygen.css" rel="stylesheet" type="text/css" />
        <link href="tabs.css" rel="stylesheet" type="text/css" />
    </head>
    <body>
        <div id="logo">
            <img src="./logo.jpg" width="770" height="200" title="SFML home" alt="SFML logo" />
        </div>
<!-- Generated by Doxygen 1.5.8 -->
<div class="navigation" id="top">
  <div class="tabs">
    <ul>
      <li><a href="index.htm"><span>Main&nbsp;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
    </ul>
  </div>
  <div class="tabs">
    <ul>
      <li><a href="annotated.htm"><span>Class&nbsp;List</span></a></li>
      <li><a href="classes.htm"><span>Class&nbsp;Index</span></a></li>
      <li><a href="hierarchy.htm"><span>Class&nbsp;Hierarchy</span></a></li>
      <li><a href="functions.htm"><span>Class&nbsp;Members</span></a></li>
    </ul>
  </div>
  <div class="navpath"><b>sf</b>::<a class="el" href="classsf_1_1RenderImage.htm">RenderImage</a>
  </div>
</div>
<div class="contents">
<h1>sf::RenderImage Class Reference</h1><!-- doxytag: class="sf::RenderImage" --><!-- doxytag: inherits="sf::RenderTarget,sf::NonCopyable" -->Target for 2D rendering into an image that can be reused in a sprite.  
<a href="#_details">More...</a>
<p>
<code>#include &lt;<a class="el" href="RenderImage_8hpp-source.htm">RenderImage.hpp</a>&gt;</code>
<p>
<div class="dynheader">
Inheritance diagram for sf::RenderImage:</div>
<div class="dynsection">

<p><center><img src="classsf_1_1RenderImage.png" usemap="#sf::RenderImage_map" border="0" alt=""></center>
<map name="sf::RenderImage_map">
<area href="classsf_1_1RenderTarget.htm" alt="sf::RenderTarget" shape="rect" coords="0,0,105,24">
<area href="structsf_1_1NonCopyable.htm" alt="sf::NonCopyable" shape="rect" coords="115,0,220,24">
</map>
</div>

<p>
<a href="classsf_1_1RenderImage-members.htm">List of all members.</a><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderImage.htm#3bb43599441a8fef91a16dd6448449ea">RenderImage</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Default constructor.  <a href="#3bb43599441a8fef91a16dd6448449ea"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderImage.htm#a708db4ce9884215d98fbec9fc806b7d">~RenderImage</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Destructor.  <a href="#a708db4ce9884215d98fbec9fc806b7d"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderImage.htm#3ec48e42ee7d39b07d0a87ddbbc3363c">Create</a> (unsigned int Width, unsigned int Height, bool DepthBuffer=false)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Create the render image from its dimensions.  <a href="#3ec48e42ee7d39b07d0a87ddbbc3363c"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderImage.htm#6bbe2da13aca007c504d8328feb874dd">SetActive</a> (bool Active=true) const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Activate of deactivate the render-image as the current target for rendering.  <a href="#6bbe2da13aca007c504d8328feb874dd"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderImage.htm#946abb59923dceb6efb1970b7b681675">GetWidth</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the width of the rendering region of the image.  <a href="#946abb59923dceb6efb1970b7b681675"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual unsigned int&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderImage.htm#fa7f01ed560b796ac44153d85b6bf2c4">GetHeight</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the height of the rendering region of the image.  <a href="#fa7f01ed560b796ac44153d85b6bf2c4"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderImage.htm#4c7ebb63910afc9b72f4fa332bf88ad0">GetImage</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the target image.  <a href="#4c7ebb63910afc9b72f4fa332bf88ad0"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#125645088d7b2df07599ea36fbb8b87e">Clear</a> (const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;FillColor=<a class="el" href="classsf_1_1Color.htm">Color</a>(0, 0, 0))</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Clear the entire target with a single color.  <a href="#125645088d7b2df07599ea36fbb8b87e"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">virtual void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#18678bb6afe22b7462e2cf08f701d2ff">Draw</a> (const <a class="el" href="classsf_1_1Drawable.htm">Drawable</a> &amp;Object)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Draw something into the target.  <a href="#18678bb6afe22b7462e2cf08f701d2ff"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#7060ca19e685d8d5b7c6f5dd9b5906e1">SetView</a> (const <a class="el" href="classsf_1_1View.htm">View</a> &amp;NewView)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Change the current active view.  <a href="#7060ca19e685d8d5b7c6f5dd9b5906e1"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">const <a class="el" href="classsf_1_1View.htm">View</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#d426b7ba51cc6970fb828a2bef020274">GetView</a> () const </td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the current view.  <a href="#d426b7ba51cc6970fb828a2bef020274"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="classsf_1_1View.htm">View</a> &amp;&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#16db9179a7f035c59b8ecdd10cc2e699">GetDefaultView</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Get the default view of the window for read / write.  <a href="#16db9179a7f035c59b8ecdd10cc2e699"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#b763d16f00166b516fead600d8824c71">PreserveOpenGLStates</a> (bool Preserve)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Tell SFML to preserve external OpenGL states, at the expense of more CPU charge.  <a href="#b763d16f00166b516fead600d8824c71"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Static Public Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">static bool&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderImage.htm#34ccb150c6e55aa3da14fa0956f77389">CanUseRenderImage</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Check whether the system supports render images or not.  <a href="#34ccb150c6e55aa3da14fa0956f77389"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Protected Member Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="classsf_1_1RenderTarget.htm#3d9265548b6903ab7f645d12177bba24">Initialize</a> ()</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Called by the derived class when it's ready to be initialized.  <a href="#3d9265548b6903ab7f645d12177bba24"></a><br></td></tr>
</table>
<hr><a name="_details"></a><h2>Detailed Description</h2>
Target for 2D rendering into an image that can be reused in a sprite. 
<p>Definition at line <a class="el" href="RenderImage_8hpp-source.htm#l00047">47</a> of file <a class="el" href="RenderImage_8hpp-source.htm">RenderImage.hpp</a>.</p>
<hr><h2>Constructor &amp; Destructor Documentation</h2>
<a class="anchor" name="3bb43599441a8fef91a16dd6448449ea"></a><!-- doxytag: member="sf::RenderImage::RenderImage" ref="3bb43599441a8fef91a16dd6448449ea" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderImage::RenderImage           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Default constructor. 
<p>

<p>Definition at line <a class="el" href="RenderImage_8cpp-source.htm#l00039">39</a> of file <a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="a708db4ce9884215d98fbec9fc806b7d"></a><!-- doxytag: member="sf::RenderImage::~RenderImage" ref="a708db4ce9884215d98fbec9fc806b7d" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">sf::RenderImage::~RenderImage           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Destructor. 
<p>

<p>Definition at line <a class="el" href="RenderImage_8cpp-source.htm#l00049">49</a> of file <a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a>.</p>

</div>
</div><p>
<hr><h2>Member Function Documentation</h2>
<a class="anchor" name="34ccb150c6e55aa3da14fa0956f77389"></a><!-- doxytag: member="sf::RenderImage::CanUseRenderImage" ref="34ccb150c6e55aa3da14fa0956f77389" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::RenderImage::CanUseRenderImage           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [static]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Check whether the system supports render images or not. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if <a class="el" href="classsf_1_1RenderImage.htm" title="Target for 2D rendering into an image that can be reused in a sprite.">RenderImage</a> can be used </dd></dl>

<p>Definition at line <a class="el" href="RenderImage_8cpp-source.htm#l00143">143</a> of file <a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="125645088d7b2df07599ea36fbb8b87e"></a><!-- doxytag: member="sf::RenderImage::Clear" ref="125645088d7b2df07599ea36fbb8b87e" args="(const Color &amp;FillColor=Color(0, 0, 0))" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Clear           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Color.htm">Color</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>FillColor</em> = <code><a class="el" href="classsf_1_1Color.htm">Color</a>(0,&nbsp;0,&nbsp;0)</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Clear the entire target with a single color. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>FillColor</em>&nbsp;</td><td>: <a class="el" href="classsf_1_1Color.htm" title="Color is an utility class for manipulating 32-bits RGBA colors.">Color</a> to use to clear the render target </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00060">60</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3ec48e42ee7d39b07d0a87ddbbc3363c"></a><!-- doxytag: member="sf::RenderImage::Create" ref="3ec48e42ee7d39b07d0a87ddbbc3363c" args="(unsigned int Width, unsigned int Height, bool DepthBuffer=false)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::RenderImage::Create           </td>
          <td>(</td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Width</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned int&nbsp;</td>
          <td class="paramname"> <em>Height</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>DepthBuffer</em> = <code>false</code></td><td>&nbsp;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td><td></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Create the render image from its dimensions. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Width</em>&nbsp;</td><td>: Width of the render image </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>Height</em>&nbsp;</td><td>: Height of the render image </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>DepthBuffer</em>&nbsp;</td><td>: Do you want a depth buffer attached ? (false by default)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if creation has been successful </dd></dl>

<p>Definition at line <a class="el" href="RenderImage_8cpp-source.htm#l00059">59</a> of file <a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="18678bb6afe22b7462e2cf08f701d2ff"></a><!-- doxytag: member="sf::RenderImage::Draw" ref="18678bb6afe22b7462e2cf08f701d2ff" args="(const Drawable &amp;Object)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Draw           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1Drawable.htm">Drawable</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>Object</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [virtual, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Draw something into the target. 
<p>
Draw something on the window.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Object</em>&nbsp;</td><td>: Object to draw </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00076">76</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="16db9179a7f035c59b8ecdd10cc2e699"></a><!-- doxytag: member="sf::RenderImage::GetDefaultView" ref="16db9179a7f035c59b8ecdd10cc2e699" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classsf_1_1View.htm">View</a> &amp; sf::RenderTarget::GetDefaultView           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the default view of the window for read / write. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Default view </dd></dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00147">147</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="fa7f01ed560b796ac44153d85b6bf2c4"></a><!-- doxytag: member="sf::RenderImage::GetHeight" ref="fa7f01ed560b796ac44153d85b6bf2c4" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::RenderImage::GetHeight           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the height of the rendering region of the image. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Height in pixels </dd></dl>

<p>Implements <a class="el" href="classsf_1_1RenderTarget.htm#9495774c371e0dd9ad9835ad2f34a03a">sf::RenderTarget</a>.</p>

<p>Definition at line <a class="el" href="RenderImage_8cpp-source.htm#l00125">125</a> of file <a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="4c7ebb63910afc9b72f4fa332bf88ad0"></a><!-- doxytag: member="sf::RenderImage::GetImage" ref="4c7ebb63910afc9b72f4fa332bf88ad0" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1Image.htm">Image</a> &amp; sf::RenderImage::GetImage           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the target image. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Target image </dd></dl>

<p>Definition at line <a class="el" href="RenderImage_8cpp-source.htm#l00134">134</a> of file <a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="d426b7ba51cc6970fb828a2bef020274"></a><!-- doxytag: member="sf::RenderImage::GetView" ref="d426b7ba51cc6970fb828a2bef020274" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">const <a class="el" href="classsf_1_1View.htm">View</a> &amp; sf::RenderTarget::GetView           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the current view. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Current view active in the window </dd></dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00138">138</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="946abb59923dceb6efb1970b7b681675"></a><!-- doxytag: member="sf::RenderImage::GetWidth" ref="946abb59923dceb6efb1970b7b681675" args="() const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">unsigned int sf::RenderImage::GetWidth           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const<code> [virtual]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Get the width of the rendering region of the image. 
<p>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>Width in pixels </dd></dl>

<p>Implements <a class="el" href="classsf_1_1RenderTarget.htm#4df749ecfddb5355d8357afe719cf681">sf::RenderTarget</a>.</p>

<p>Definition at line <a class="el" href="RenderImage_8cpp-source.htm#l00116">116</a> of file <a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="3d9265548b6903ab7f645d12177bba24"></a><!-- doxytag: member="sf::RenderImage::Initialize" ref="3d9265548b6903ab7f645d12177bba24" args="()" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::Initialize           </td>
          <td>(</td>
          <td class="paramname">          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [protected, inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Called by the derived class when it's ready to be initialized. 
<p>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00169">169</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="b763d16f00166b516fead600d8824c71"></a><!-- doxytag: member="sf::RenderImage::PreserveOpenGLStates" ref="b763d16f00166b516fead600d8824c71" args="(bool Preserve)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::PreserveOpenGLStates           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Preserve</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Tell SFML to preserve external OpenGL states, at the expense of more CPU charge. 
<p>
Tell SFML to preserve external OpenGL states, at the expense of more CPU charge.<p>
Use this function if you don't want SFML to mess up your own OpenGL states (if any). Don't enable state preservation if not needed, as it will allow SFML to do internal optimizations and improve performances. This parameter is false by default<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Preserve</em>&nbsp;</td><td>: True to preserve OpenGL states, false to let SFML optimize</td></tr>
  </table>
</dl>
Use this function if you don't want SFML to mess up your own OpenGL states (if any). Don't enable state preservation if not needed, as it will allow SFML to do internal optimizations and improve performances. This parameter is false by default 
<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00160">160</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="6bbe2da13aca007c504d8328feb874dd"></a><!-- doxytag: member="sf::RenderImage::SetActive" ref="6bbe2da13aca007c504d8328feb874dd" args="(bool Active=true) const " -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">bool sf::RenderImage::SetActive           </td>
          <td>(</td>
          <td class="paramtype">bool&nbsp;</td>
          <td class="paramname"> <em>Active</em> = <code>true</code>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td> const</td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Activate of deactivate the render-image as the current target for rendering. 
<p>
Activate of deactivate the render-image as the current target for rendering.<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>Active</em>&nbsp;</td><td>: True to activate, false to deactivate (true by default)</td></tr>
  </table>
</dl>
<dl class="return" compact><dt><b>Returns:</b></dt><dd>True if operation was successful, false otherwise </dd></dl>

<p>Definition at line <a class="el" href="RenderImage_8cpp-source.htm#l00107">107</a> of file <a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a>.</p>

</div>
</div><p>
<a class="anchor" name="7060ca19e685d8d5b7c6f5dd9b5906e1"></a><!-- doxytag: member="sf::RenderImage::SetView" ref="7060ca19e685d8d5b7c6f5dd9b5906e1" args="(const View &amp;NewView)" -->
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">void sf::RenderTarget::SetView           </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classsf_1_1View.htm">View</a> &amp;&nbsp;</td>
          <td class="paramname"> <em>NewView</em>          </td>
          <td>&nbsp;)&nbsp;</td>
          <td><code> [inherited]</code></td>
        </tr>
      </table>
</div>
<div class="memdoc">

<p>
Change the current active view. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>NewView</em>&nbsp;</td><td>: New view to use (pass <a class="el" href="classsf_1_1RenderTarget.htm#16db9179a7f035c59b8ecdd10cc2e699" title="Get the default view of the window for read / write.">GetDefaultView()</a> to set the default view) </td></tr>
  </table>
</dl>

<p>Definition at line <a class="el" href="RenderTarget_8cpp-source.htm#l00129">129</a> of file <a class="el" href="RenderTarget_8cpp-source.htm">RenderTarget.cpp</a>.</p>

</div>
</div><p>
<hr>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="RenderImage_8hpp-source.htm">RenderImage.hpp</a><li><a class="el" href="RenderImage_8cpp-source.htm">RenderImage.cpp</a></ul>
</div>

        <p id="footer">
            &nbsp;::&nbsp; Copyright &copy; 2007-2008 Laurent Gomila, all rights reserved &nbsp;::&nbsp;
            Documentation generated by <a href="http://www.doxygen.org/" title="doxygen website">doxygen 1.5.2</a> &nbsp;::&nbsp;
        </p>

    </body>
</html>
